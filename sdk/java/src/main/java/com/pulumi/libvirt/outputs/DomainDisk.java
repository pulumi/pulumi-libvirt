// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.libvirt.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainDisk {
    /**
     * @return The path to the host device to use as the block device for this disk.
     * 
     * While `volume_id`, `url`, `file` and `block_device` are optional, it is intended that you use one of them.
     * 
     */
    private @Nullable String blockDevice;
    /**
     * @return The filename to use as the block device for this disk (read-only)
     * 
     */
    private @Nullable String file;
    /**
     * @return Use a scsi controller for this disk.  The controller
     * model is set to `virtio-scsi`
     * 
     */
    private @Nullable Boolean scsi;
    /**
     * @return The http url to use as the block device for this disk (read-only)
     * 
     */
    private @Nullable String url;
    /**
     * @return The volume id to use for this disk.
     * 
     */
    private @Nullable String volumeId;
    /**
     * @return Specify a WWN to use for the disk if the disk is using
     * a scsi controller, if not specified then a random wwn is generated for the disk
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.libvirt.Volume;
     * import com.pulumi.libvirt.VolumeArgs;
     * import com.pulumi.libvirt.Domain;
     * import com.pulumi.libvirt.DomainArgs;
     * import com.pulumi.libvirt.inputs.DomainDiskArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var leap = new Volume(&#34;leap&#34;, VolumeArgs.builder()        
     *             .source(&#34;http://someurl/openSUSE_Leap-42.1.qcow2&#34;)
     *             .build());
     * 
     *         var mydisk = new Volume(&#34;mydisk&#34;, VolumeArgs.builder()        
     *             .baseVolumeId(leap.id())
     *             .build());
     * 
     *         var domain1 = new Domain(&#34;domain1&#34;, DomainArgs.builder()        
     *             .disks(            
     *                 DomainDiskArgs.builder()
     *                     .volumeId(mydisk.id())
     *                     .scsi(&#34;true&#34;)
     *                     .build(),
     *                 DomainDiskArgs.builder()
     *                     .url(&#34;http://foo.com/install.iso&#34;)
     *                     .build(),
     *                 DomainDiskArgs.builder()
     *                     .file(&#34;/absolute/path/to/disk.iso&#34;)
     *                     .build(),
     *                 DomainDiskArgs.builder()
     *                     .blockDevice(&#34;/dev/mapper/36005076802810e55400000000000145f&#34;)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Also note that the `disk` block is actually a list of maps, so it is possible to
     * declare several of them by using either the literal list and map syntax as in
     * the following examples:
     * 
     */
    private @Nullable String wwn;

    private DomainDisk() {}
    /**
     * @return The path to the host device to use as the block device for this disk.
     * 
     * While `volume_id`, `url`, `file` and `block_device` are optional, it is intended that you use one of them.
     * 
     */
    public Optional<String> blockDevice() {
        return Optional.ofNullable(this.blockDevice);
    }
    /**
     * @return The filename to use as the block device for this disk (read-only)
     * 
     */
    public Optional<String> file() {
        return Optional.ofNullable(this.file);
    }
    /**
     * @return Use a scsi controller for this disk.  The controller
     * model is set to `virtio-scsi`
     * 
     */
    public Optional<Boolean> scsi() {
        return Optional.ofNullable(this.scsi);
    }
    /**
     * @return The http url to use as the block device for this disk (read-only)
     * 
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }
    /**
     * @return The volume id to use for this disk.
     * 
     */
    public Optional<String> volumeId() {
        return Optional.ofNullable(this.volumeId);
    }
    /**
     * @return Specify a WWN to use for the disk if the disk is using
     * a scsi controller, if not specified then a random wwn is generated for the disk
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.libvirt.Volume;
     * import com.pulumi.libvirt.VolumeArgs;
     * import com.pulumi.libvirt.Domain;
     * import com.pulumi.libvirt.DomainArgs;
     * import com.pulumi.libvirt.inputs.DomainDiskArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var leap = new Volume(&#34;leap&#34;, VolumeArgs.builder()        
     *             .source(&#34;http://someurl/openSUSE_Leap-42.1.qcow2&#34;)
     *             .build());
     * 
     *         var mydisk = new Volume(&#34;mydisk&#34;, VolumeArgs.builder()        
     *             .baseVolumeId(leap.id())
     *             .build());
     * 
     *         var domain1 = new Domain(&#34;domain1&#34;, DomainArgs.builder()        
     *             .disks(            
     *                 DomainDiskArgs.builder()
     *                     .volumeId(mydisk.id())
     *                     .scsi(&#34;true&#34;)
     *                     .build(),
     *                 DomainDiskArgs.builder()
     *                     .url(&#34;http://foo.com/install.iso&#34;)
     *                     .build(),
     *                 DomainDiskArgs.builder()
     *                     .file(&#34;/absolute/path/to/disk.iso&#34;)
     *                     .build(),
     *                 DomainDiskArgs.builder()
     *                     .blockDevice(&#34;/dev/mapper/36005076802810e55400000000000145f&#34;)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Also note that the `disk` block is actually a list of maps, so it is possible to
     * declare several of them by using either the literal list and map syntax as in
     * the following examples:
     * 
     */
    public Optional<String> wwn() {
        return Optional.ofNullable(this.wwn);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String blockDevice;
        private @Nullable String file;
        private @Nullable Boolean scsi;
        private @Nullable String url;
        private @Nullable String volumeId;
        private @Nullable String wwn;
        public Builder() {}
        public Builder(DomainDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blockDevice = defaults.blockDevice;
    	      this.file = defaults.file;
    	      this.scsi = defaults.scsi;
    	      this.url = defaults.url;
    	      this.volumeId = defaults.volumeId;
    	      this.wwn = defaults.wwn;
        }

        @CustomType.Setter
        public Builder blockDevice(@Nullable String blockDevice) {
            this.blockDevice = blockDevice;
            return this;
        }
        @CustomType.Setter
        public Builder file(@Nullable String file) {
            this.file = file;
            return this;
        }
        @CustomType.Setter
        public Builder scsi(@Nullable Boolean scsi) {
            this.scsi = scsi;
            return this;
        }
        @CustomType.Setter
        public Builder url(@Nullable String url) {
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder volumeId(@Nullable String volumeId) {
            this.volumeId = volumeId;
            return this;
        }
        @CustomType.Setter
        public Builder wwn(@Nullable String wwn) {
            this.wwn = wwn;
            return this;
        }
        public DomainDisk build() {
            final var o = new DomainDisk();
            o.blockDevice = blockDevice;
            o.file = file;
            o.scsi = scsi;
            o.url = url;
            o.volumeId = volumeId;
            o.wwn = wwn;
            return o;
        }
    }
}
