// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.libvirt.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainNetworkInterface {
    /**
     * @return An IP address for this domain in this network.
     * 
     */
    private @Nullable List<String> addresses;
    /**
     * @return Provides a bridge from the VM directly to the LAN. This assumes
     * there is a bridge device on the host which has one or more of the hosts
     * physical NICs enslaved. The guest VM will have an associated _tun_ device
     * created and enslaved to the bridge. The IP range / network configuration is
     * whatever is used on the LAN. This provides the guest VM full incoming &amp;
     * outgoing net access just like a physical machine.
     * 
     */
    private @Nullable String bridge;
    /**
     * @return A hostname that will be assigned to this domain
     * resource in this network.
     * 
     */
    private @Nullable String hostname;
    /**
     * @return The specific MAC address to use for this interface.
     * 
     */
    private @Nullable String mac;
    /**
     * @return Packets whose destination is on the same host as where they
     * originate from are directly delivered to the target macvtap device. Both
     * origin and destination devices need to be in bridge mode for direct delivery.
     * If either one of them is in vepa mode, a VEPA capable bridge is required.
     * 
     */
    private @Nullable String macvtap;
    private @Nullable String networkId;
    private @Nullable String networkName;
    /**
     * @return This feature attaches a virtual function of a SRIOV capable
     * NIC directly to a VM without losing the migration capability. All packets are
     * sent to the VF/IF of the configured network device. Depending on the
     * capabilities of the device additional prerequisites or limitations may apply;
     * for example, on Linux this requires kernel 2.6.38 or newer.
     * 
     */
    private @Nullable String passthrough;
    /**
     * @return All VMs&#39; packets are sent to the external bridge. Packets whose
     * destination is a VM on the same host as where the packet originates from are
     * sent back to the host by the VEPA capable bridge (today&#39;s bridges are
     * typically not VEPA capable).
     * 
     */
    private @Nullable String vepa;
    /**
     * @return When creating the domain resource, wait until the
     * network interface gets a DHCP lease from libvirt, so that the computed IP
     * addresses will be available when the domain is up and the plan applied.
     * 
     */
    private @Nullable Boolean waitForLease;

    private DomainNetworkInterface() {}
    /**
     * @return An IP address for this domain in this network.
     * 
     */
    public List<String> addresses() {
        return this.addresses == null ? List.of() : this.addresses;
    }
    /**
     * @return Provides a bridge from the VM directly to the LAN. This assumes
     * there is a bridge device on the host which has one or more of the hosts
     * physical NICs enslaved. The guest VM will have an associated _tun_ device
     * created and enslaved to the bridge. The IP range / network configuration is
     * whatever is used on the LAN. This provides the guest VM full incoming &amp;
     * outgoing net access just like a physical machine.
     * 
     */
    public Optional<String> bridge() {
        return Optional.ofNullable(this.bridge);
    }
    /**
     * @return A hostname that will be assigned to this domain
     * resource in this network.
     * 
     */
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }
    /**
     * @return The specific MAC address to use for this interface.
     * 
     */
    public Optional<String> mac() {
        return Optional.ofNullable(this.mac);
    }
    /**
     * @return Packets whose destination is on the same host as where they
     * originate from are directly delivered to the target macvtap device. Both
     * origin and destination devices need to be in bridge mode for direct delivery.
     * If either one of them is in vepa mode, a VEPA capable bridge is required.
     * 
     */
    public Optional<String> macvtap() {
        return Optional.ofNullable(this.macvtap);
    }
    public Optional<String> networkId() {
        return Optional.ofNullable(this.networkId);
    }
    public Optional<String> networkName() {
        return Optional.ofNullable(this.networkName);
    }
    /**
     * @return This feature attaches a virtual function of a SRIOV capable
     * NIC directly to a VM without losing the migration capability. All packets are
     * sent to the VF/IF of the configured network device. Depending on the
     * capabilities of the device additional prerequisites or limitations may apply;
     * for example, on Linux this requires kernel 2.6.38 or newer.
     * 
     */
    public Optional<String> passthrough() {
        return Optional.ofNullable(this.passthrough);
    }
    /**
     * @return All VMs&#39; packets are sent to the external bridge. Packets whose
     * destination is a VM on the same host as where the packet originates from are
     * sent back to the host by the VEPA capable bridge (today&#39;s bridges are
     * typically not VEPA capable).
     * 
     */
    public Optional<String> vepa() {
        return Optional.ofNullable(this.vepa);
    }
    /**
     * @return When creating the domain resource, wait until the
     * network interface gets a DHCP lease from libvirt, so that the computed IP
     * addresses will be available when the domain is up and the plan applied.
     * 
     */
    public Optional<Boolean> waitForLease() {
        return Optional.ofNullable(this.waitForLease);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainNetworkInterface defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> addresses;
        private @Nullable String bridge;
        private @Nullable String hostname;
        private @Nullable String mac;
        private @Nullable String macvtap;
        private @Nullable String networkId;
        private @Nullable String networkName;
        private @Nullable String passthrough;
        private @Nullable String vepa;
        private @Nullable Boolean waitForLease;
        public Builder() {}
        public Builder(DomainNetworkInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addresses = defaults.addresses;
    	      this.bridge = defaults.bridge;
    	      this.hostname = defaults.hostname;
    	      this.mac = defaults.mac;
    	      this.macvtap = defaults.macvtap;
    	      this.networkId = defaults.networkId;
    	      this.networkName = defaults.networkName;
    	      this.passthrough = defaults.passthrough;
    	      this.vepa = defaults.vepa;
    	      this.waitForLease = defaults.waitForLease;
        }

        @CustomType.Setter
        public Builder addresses(@Nullable List<String> addresses) {
            this.addresses = addresses;
            return this;
        }
        public Builder addresses(String... addresses) {
            return addresses(List.of(addresses));
        }
        @CustomType.Setter
        public Builder bridge(@Nullable String bridge) {
            this.bridge = bridge;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(@Nullable String hostname) {
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder mac(@Nullable String mac) {
            this.mac = mac;
            return this;
        }
        @CustomType.Setter
        public Builder macvtap(@Nullable String macvtap) {
            this.macvtap = macvtap;
            return this;
        }
        @CustomType.Setter
        public Builder networkId(@Nullable String networkId) {
            this.networkId = networkId;
            return this;
        }
        @CustomType.Setter
        public Builder networkName(@Nullable String networkName) {
            this.networkName = networkName;
            return this;
        }
        @CustomType.Setter
        public Builder passthrough(@Nullable String passthrough) {
            this.passthrough = passthrough;
            return this;
        }
        @CustomType.Setter
        public Builder vepa(@Nullable String vepa) {
            this.vepa = vepa;
            return this;
        }
        @CustomType.Setter
        public Builder waitForLease(@Nullable Boolean waitForLease) {
            this.waitForLease = waitForLease;
            return this;
        }
        public DomainNetworkInterface build() {
            final var o = new DomainNetworkInterface();
            o.addresses = addresses;
            o.bridge = bridge;
            o.hostname = hostname;
            o.mac = mac;
            o.macvtap = macvtap;
            o.networkId = networkId;
            o.networkName = networkName;
            o.passthrough = passthrough;
            o.vepa = vepa;
            o.waitForLease = waitForLease;
            return o;
        }
    }
}
