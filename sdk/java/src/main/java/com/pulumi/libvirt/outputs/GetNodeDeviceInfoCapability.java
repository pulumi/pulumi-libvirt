// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.libvirt.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.libvirt.outputs.GetNodeDeviceInfoCapabilityIommuGroup;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNodeDeviceInfoCapability {
    /**
     * @return If present, the MAC address of the device
     * 
     */
    private @Nullable String address;
    /**
     * @return Block device name
     * 
     */
    private String block;
    /**
     * @return The bus within the host
     * 
     */
    private String bus;
    /**
     * @return Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
     * 
     */
    private @Nullable Map<String,String> capability;
    /**
     * @return Device class
     * 
     */
    private String class_;
    private String description;
    /**
     * @return Which device within the \
     * 
     */
    private String device;
    /**
     * @return Device PCI domain
     * 
     */
    private String domain;
    /**
     * @return Device drive type
     * 
     */
    private String driveType;
    /**
     * @return Type of DRM device: `render` or `card`
     * 
     */
    private String drmType;
    private @Nullable List<String> features;
    private @Nullable Map<String,String> firmware;
    /**
     * @return Device PCI function
     * 
     */
    private String function;
    private @Nullable Map<String,String> hardware;
    /**
     * @return The SCSI host containing the device
     * 
     */
    private String host;
    /**
     * @return The interface name tied to this device
     * 
     */
    private @Nullable String interface_;
    /**
     * @return Structure that holds IOMMU Group `number` and the list of devices that are part of the group
     * 
     */
    private GetNodeDeviceInfoCapabilityIommuGroup iommuGroup;
    /**
     * @return Optional to reflect the status of the link via `speed` and `state` keys
     * 
     */
    private @Nullable Map<String,String> link;
    /**
     * @return Device logical block size
     * 
     */
    private String logicalBlockSize;
    /**
     * @return The lun within the target
     * 
     */
    private String lun;
    /**
     * @return Device model
     * 
     */
    private String model;
    /**
     * @return Number of blocks on the device
     * 
     */
    private String numBlocks;
    /**
     * @return Device number
     * 
     */
    private String number;
    /**
     * @return If present, the product `id` and `name` from the device ROM
     * 
     */
    private @Nullable Map<String,String> product;
    /**
     * @return Device protocol
     * 
     */
    private String protocol;
    /**
     * @return The type of SCSI device
     * 
     */
    private String scsiType;
    /**
     * @return Device serial number
     * 
     */
    private String serial;
    /**
     * @return Device size in bytes
     * 
     */
    private String size;
    /**
     * @return Device PCI slot
     * 
     */
    private String slot;
    /**
     * @return Device subclass
     * 
     */
    private String subclass;
    /**
     * @return The target within the bus
     * 
     */
    private String target;
    /**
     * @return Device type: `pci`, `storage`, `usb`
     * 
     */
    private String type;
    /**
     * @return This optionally provides the value from the &#39;unique_id&#39; file found in the scsi_host&#39;s directory
     * 
     */
    private String uniqueId;
    /**
     * @return If present, the vendor `id` and `name` from the device ROM
     * 
     */
    private @Nullable Map<String,String> vendor;

    private GetNodeDeviceInfoCapability() {}
    /**
     * @return If present, the MAC address of the device
     * 
     */
    public Optional<String> address() {
        return Optional.ofNullable(this.address);
    }
    /**
     * @return Block device name
     * 
     */
    public String block() {
        return this.block;
    }
    /**
     * @return The bus within the host
     * 
     */
    public String bus() {
        return this.bus;
    }
    /**
     * @return Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
     * 
     */
    public Map<String,String> capability() {
        return this.capability == null ? Map.of() : this.capability;
    }
    /**
     * @return Device class
     * 
     */
    public String class_() {
        return this.class_;
    }
    public String description() {
        return this.description;
    }
    /**
     * @return Which device within the \
     * 
     */
    public String device() {
        return this.device;
    }
    /**
     * @return Device PCI domain
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return Device drive type
     * 
     */
    public String driveType() {
        return this.driveType;
    }
    /**
     * @return Type of DRM device: `render` or `card`
     * 
     */
    public String drmType() {
        return this.drmType;
    }
    public List<String> features() {
        return this.features == null ? List.of() : this.features;
    }
    public Map<String,String> firmware() {
        return this.firmware == null ? Map.of() : this.firmware;
    }
    /**
     * @return Device PCI function
     * 
     */
    public String function() {
        return this.function;
    }
    public Map<String,String> hardware() {
        return this.hardware == null ? Map.of() : this.hardware;
    }
    /**
     * @return The SCSI host containing the device
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The interface name tied to this device
     * 
     */
    public Optional<String> interface_() {
        return Optional.ofNullable(this.interface_);
    }
    /**
     * @return Structure that holds IOMMU Group `number` and the list of devices that are part of the group
     * 
     */
    public GetNodeDeviceInfoCapabilityIommuGroup iommuGroup() {
        return this.iommuGroup;
    }
    /**
     * @return Optional to reflect the status of the link via `speed` and `state` keys
     * 
     */
    public Map<String,String> link() {
        return this.link == null ? Map.of() : this.link;
    }
    /**
     * @return Device logical block size
     * 
     */
    public String logicalBlockSize() {
        return this.logicalBlockSize;
    }
    /**
     * @return The lun within the target
     * 
     */
    public String lun() {
        return this.lun;
    }
    /**
     * @return Device model
     * 
     */
    public String model() {
        return this.model;
    }
    /**
     * @return Number of blocks on the device
     * 
     */
    public String numBlocks() {
        return this.numBlocks;
    }
    /**
     * @return Device number
     * 
     */
    public String number() {
        return this.number;
    }
    /**
     * @return If present, the product `id` and `name` from the device ROM
     * 
     */
    public Map<String,String> product() {
        return this.product == null ? Map.of() : this.product;
    }
    /**
     * @return Device protocol
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The type of SCSI device
     * 
     */
    public String scsiType() {
        return this.scsiType;
    }
    /**
     * @return Device serial number
     * 
     */
    public String serial() {
        return this.serial;
    }
    /**
     * @return Device size in bytes
     * 
     */
    public String size() {
        return this.size;
    }
    /**
     * @return Device PCI slot
     * 
     */
    public String slot() {
        return this.slot;
    }
    /**
     * @return Device subclass
     * 
     */
    public String subclass() {
        return this.subclass;
    }
    /**
     * @return The target within the bus
     * 
     */
    public String target() {
        return this.target;
    }
    /**
     * @return Device type: `pci`, `storage`, `usb`
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return This optionally provides the value from the &#39;unique_id&#39; file found in the scsi_host&#39;s directory
     * 
     */
    public String uniqueId() {
        return this.uniqueId;
    }
    /**
     * @return If present, the vendor `id` and `name` from the device ROM
     * 
     */
    public Map<String,String> vendor() {
        return this.vendor == null ? Map.of() : this.vendor;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeDeviceInfoCapability defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String address;
        private String block;
        private String bus;
        private @Nullable Map<String,String> capability;
        private String class_;
        private String description;
        private String device;
        private String domain;
        private String driveType;
        private String drmType;
        private @Nullable List<String> features;
        private @Nullable Map<String,String> firmware;
        private String function;
        private @Nullable Map<String,String> hardware;
        private String host;
        private @Nullable String interface_;
        private GetNodeDeviceInfoCapabilityIommuGroup iommuGroup;
        private @Nullable Map<String,String> link;
        private String logicalBlockSize;
        private String lun;
        private String model;
        private String numBlocks;
        private String number;
        private @Nullable Map<String,String> product;
        private String protocol;
        private String scsiType;
        private String serial;
        private String size;
        private String slot;
        private String subclass;
        private String target;
        private String type;
        private String uniqueId;
        private @Nullable Map<String,String> vendor;
        public Builder() {}
        public Builder(GetNodeDeviceInfoCapability defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.block = defaults.block;
    	      this.bus = defaults.bus;
    	      this.capability = defaults.capability;
    	      this.class_ = defaults.class_;
    	      this.description = defaults.description;
    	      this.device = defaults.device;
    	      this.domain = defaults.domain;
    	      this.driveType = defaults.driveType;
    	      this.drmType = defaults.drmType;
    	      this.features = defaults.features;
    	      this.firmware = defaults.firmware;
    	      this.function = defaults.function;
    	      this.hardware = defaults.hardware;
    	      this.host = defaults.host;
    	      this.interface_ = defaults.interface_;
    	      this.iommuGroup = defaults.iommuGroup;
    	      this.link = defaults.link;
    	      this.logicalBlockSize = defaults.logicalBlockSize;
    	      this.lun = defaults.lun;
    	      this.model = defaults.model;
    	      this.numBlocks = defaults.numBlocks;
    	      this.number = defaults.number;
    	      this.product = defaults.product;
    	      this.protocol = defaults.protocol;
    	      this.scsiType = defaults.scsiType;
    	      this.serial = defaults.serial;
    	      this.size = defaults.size;
    	      this.slot = defaults.slot;
    	      this.subclass = defaults.subclass;
    	      this.target = defaults.target;
    	      this.type = defaults.type;
    	      this.uniqueId = defaults.uniqueId;
    	      this.vendor = defaults.vendor;
        }

        @CustomType.Setter
        public Builder address(@Nullable String address) {

            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder block(String block) {
            if (block == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "block");
            }
            this.block = block;
            return this;
        }
        @CustomType.Setter
        public Builder bus(String bus) {
            if (bus == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "bus");
            }
            this.bus = bus;
            return this;
        }
        @CustomType.Setter
        public Builder capability(@Nullable Map<String,String> capability) {

            this.capability = capability;
            return this;
        }
        @CustomType.Setter("class")
        public Builder class_(String class_) {
            if (class_ == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "class_");
            }
            this.class_ = class_;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder device(String device) {
            if (device == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "device");
            }
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder driveType(String driveType) {
            if (driveType == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "driveType");
            }
            this.driveType = driveType;
            return this;
        }
        @CustomType.Setter
        public Builder drmType(String drmType) {
            if (drmType == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "drmType");
            }
            this.drmType = drmType;
            return this;
        }
        @CustomType.Setter
        public Builder features(@Nullable List<String> features) {

            this.features = features;
            return this;
        }
        public Builder features(String... features) {
            return features(List.of(features));
        }
        @CustomType.Setter
        public Builder firmware(@Nullable Map<String,String> firmware) {

            this.firmware = firmware;
            return this;
        }
        @CustomType.Setter
        public Builder function(String function) {
            if (function == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "function");
            }
            this.function = function;
            return this;
        }
        @CustomType.Setter
        public Builder hardware(@Nullable Map<String,String> hardware) {

            this.hardware = hardware;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter("interface")
        public Builder interface_(@Nullable String interface_) {

            this.interface_ = interface_;
            return this;
        }
        @CustomType.Setter
        public Builder iommuGroup(GetNodeDeviceInfoCapabilityIommuGroup iommuGroup) {
            if (iommuGroup == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "iommuGroup");
            }
            this.iommuGroup = iommuGroup;
            return this;
        }
        @CustomType.Setter
        public Builder link(@Nullable Map<String,String> link) {

            this.link = link;
            return this;
        }
        @CustomType.Setter
        public Builder logicalBlockSize(String logicalBlockSize) {
            if (logicalBlockSize == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "logicalBlockSize");
            }
            this.logicalBlockSize = logicalBlockSize;
            return this;
        }
        @CustomType.Setter
        public Builder lun(String lun) {
            if (lun == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "lun");
            }
            this.lun = lun;
            return this;
        }
        @CustomType.Setter
        public Builder model(String model) {
            if (model == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "model");
            }
            this.model = model;
            return this;
        }
        @CustomType.Setter
        public Builder numBlocks(String numBlocks) {
            if (numBlocks == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "numBlocks");
            }
            this.numBlocks = numBlocks;
            return this;
        }
        @CustomType.Setter
        public Builder number(String number) {
            if (number == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "number");
            }
            this.number = number;
            return this;
        }
        @CustomType.Setter
        public Builder product(@Nullable Map<String,String> product) {

            this.product = product;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder scsiType(String scsiType) {
            if (scsiType == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "scsiType");
            }
            this.scsiType = scsiType;
            return this;
        }
        @CustomType.Setter
        public Builder serial(String serial) {
            if (serial == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "serial");
            }
            this.serial = serial;
            return this;
        }
        @CustomType.Setter
        public Builder size(String size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder slot(String slot) {
            if (slot == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "slot");
            }
            this.slot = slot;
            return this;
        }
        @CustomType.Setter
        public Builder subclass(String subclass) {
            if (subclass == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "subclass");
            }
            this.subclass = subclass;
            return this;
        }
        @CustomType.Setter
        public Builder target(String target) {
            if (target == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "target");
            }
            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uniqueId(String uniqueId) {
            if (uniqueId == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoCapability", "uniqueId");
            }
            this.uniqueId = uniqueId;
            return this;
        }
        @CustomType.Setter
        public Builder vendor(@Nullable Map<String,String> vendor) {

            this.vendor = vendor;
            return this;
        }
        public GetNodeDeviceInfoCapability build() {
            final var _resultValue = new GetNodeDeviceInfoCapability();
            _resultValue.address = address;
            _resultValue.block = block;
            _resultValue.bus = bus;
            _resultValue.capability = capability;
            _resultValue.class_ = class_;
            _resultValue.description = description;
            _resultValue.device = device;
            _resultValue.domain = domain;
            _resultValue.driveType = driveType;
            _resultValue.drmType = drmType;
            _resultValue.features = features;
            _resultValue.firmware = firmware;
            _resultValue.function = function;
            _resultValue.hardware = hardware;
            _resultValue.host = host;
            _resultValue.interface_ = interface_;
            _resultValue.iommuGroup = iommuGroup;
            _resultValue.link = link;
            _resultValue.logicalBlockSize = logicalBlockSize;
            _resultValue.lun = lun;
            _resultValue.model = model;
            _resultValue.numBlocks = numBlocks;
            _resultValue.number = number;
            _resultValue.product = product;
            _resultValue.protocol = protocol;
            _resultValue.scsiType = scsiType;
            _resultValue.serial = serial;
            _resultValue.size = size;
            _resultValue.slot = slot;
            _resultValue.subclass = subclass;
            _resultValue.target = target;
            _resultValue.type = type;
            _resultValue.uniqueId = uniqueId;
            _resultValue.vendor = vendor;
            return _resultValue;
        }
    }
}
