// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.libvirt.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainTpmArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainTpmArgs Empty = new DomainTpmArgs();

    /**
     * Path to TPM device on the host, ex: `/dev/tpm0`
     * 
     * Additional attributes when `backend_type` is &#34;emulator&#34;:
     * 
     */
    @Import(name="backendDevicePath")
    private @Nullable Output<String> backendDevicePath;

    /**
     * @return Path to TPM device on the host, ex: `/dev/tpm0`
     * 
     * Additional attributes when `backend_type` is &#34;emulator&#34;:
     * 
     */
    public Optional<Output<String>> backendDevicePath() {
        return Optional.ofNullable(this.backendDevicePath);
    }

    /**
     * [Secret object](https://libvirt.org/formatsecret.html) for encrypting the TPM state
     * 
     */
    @Import(name="backendEncryptionSecret")
    private @Nullable Output<String> backendEncryptionSecret;

    /**
     * @return [Secret object](https://libvirt.org/formatsecret.html) for encrypting the TPM state
     * 
     */
    public Optional<Output<String>> backendEncryptionSecret() {
        return Optional.ofNullable(this.backendEncryptionSecret);
    }

    /**
     * Keep the TPM state when a transient domain is powered off or undefined
     * 
     */
    @Import(name="backendPersistentState")
    private @Nullable Output<Boolean> backendPersistentState;

    /**
     * @return Keep the TPM state when a transient domain is powered off or undefined
     * 
     */
    public Optional<Output<Boolean>> backendPersistentState() {
        return Optional.ofNullable(this.backendPersistentState);
    }

    /**
     * TPM backend, either `passthrough` or `emulator` (default: `emulator`)
     * 
     * Additional attributes when `backend_type` is &#34;passthrough&#34;:
     * 
     */
    @Import(name="backendType")
    private @Nullable Output<String> backendType;

    /**
     * @return TPM backend, either `passthrough` or `emulator` (default: `emulator`)
     * 
     * Additional attributes when `backend_type` is &#34;passthrough&#34;:
     * 
     */
    public Optional<Output<String>> backendType() {
        return Optional.ofNullable(this.backendType);
    }

    /**
     * TPM version
     * 
     */
    @Import(name="backendVersion")
    private @Nullable Output<String> backendVersion;

    /**
     * @return TPM version
     * 
     */
    public Optional<Output<String>> backendVersion() {
        return Optional.ofNullable(this.backendVersion);
    }

    /**
     * TPM model provided to the guest
     * 
     */
    @Import(name="model")
    private @Nullable Output<String> model;

    /**
     * @return TPM model provided to the guest
     * 
     */
    public Optional<Output<String>> model() {
        return Optional.ofNullable(this.model);
    }

    private DomainTpmArgs() {}

    private DomainTpmArgs(DomainTpmArgs $) {
        this.backendDevicePath = $.backendDevicePath;
        this.backendEncryptionSecret = $.backendEncryptionSecret;
        this.backendPersistentState = $.backendPersistentState;
        this.backendType = $.backendType;
        this.backendVersion = $.backendVersion;
        this.model = $.model;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainTpmArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainTpmArgs $;

        public Builder() {
            $ = new DomainTpmArgs();
        }

        public Builder(DomainTpmArgs defaults) {
            $ = new DomainTpmArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendDevicePath Path to TPM device on the host, ex: `/dev/tpm0`
         * 
         * Additional attributes when `backend_type` is &#34;emulator&#34;:
         * 
         * @return builder
         * 
         */
        public Builder backendDevicePath(@Nullable Output<String> backendDevicePath) {
            $.backendDevicePath = backendDevicePath;
            return this;
        }

        /**
         * @param backendDevicePath Path to TPM device on the host, ex: `/dev/tpm0`
         * 
         * Additional attributes when `backend_type` is &#34;emulator&#34;:
         * 
         * @return builder
         * 
         */
        public Builder backendDevicePath(String backendDevicePath) {
            return backendDevicePath(Output.of(backendDevicePath));
        }

        /**
         * @param backendEncryptionSecret [Secret object](https://libvirt.org/formatsecret.html) for encrypting the TPM state
         * 
         * @return builder
         * 
         */
        public Builder backendEncryptionSecret(@Nullable Output<String> backendEncryptionSecret) {
            $.backendEncryptionSecret = backendEncryptionSecret;
            return this;
        }

        /**
         * @param backendEncryptionSecret [Secret object](https://libvirt.org/formatsecret.html) for encrypting the TPM state
         * 
         * @return builder
         * 
         */
        public Builder backendEncryptionSecret(String backendEncryptionSecret) {
            return backendEncryptionSecret(Output.of(backendEncryptionSecret));
        }

        /**
         * @param backendPersistentState Keep the TPM state when a transient domain is powered off or undefined
         * 
         * @return builder
         * 
         */
        public Builder backendPersistentState(@Nullable Output<Boolean> backendPersistentState) {
            $.backendPersistentState = backendPersistentState;
            return this;
        }

        /**
         * @param backendPersistentState Keep the TPM state when a transient domain is powered off or undefined
         * 
         * @return builder
         * 
         */
        public Builder backendPersistentState(Boolean backendPersistentState) {
            return backendPersistentState(Output.of(backendPersistentState));
        }

        /**
         * @param backendType TPM backend, either `passthrough` or `emulator` (default: `emulator`)
         * 
         * Additional attributes when `backend_type` is &#34;passthrough&#34;:
         * 
         * @return builder
         * 
         */
        public Builder backendType(@Nullable Output<String> backendType) {
            $.backendType = backendType;
            return this;
        }

        /**
         * @param backendType TPM backend, either `passthrough` or `emulator` (default: `emulator`)
         * 
         * Additional attributes when `backend_type` is &#34;passthrough&#34;:
         * 
         * @return builder
         * 
         */
        public Builder backendType(String backendType) {
            return backendType(Output.of(backendType));
        }

        /**
         * @param backendVersion TPM version
         * 
         * @return builder
         * 
         */
        public Builder backendVersion(@Nullable Output<String> backendVersion) {
            $.backendVersion = backendVersion;
            return this;
        }

        /**
         * @param backendVersion TPM version
         * 
         * @return builder
         * 
         */
        public Builder backendVersion(String backendVersion) {
            return backendVersion(Output.of(backendVersion));
        }

        /**
         * @param model TPM model provided to the guest
         * 
         * @return builder
         * 
         */
        public Builder model(@Nullable Output<String> model) {
            $.model = model;
            return this;
        }

        /**
         * @param model TPM model provided to the guest
         * 
         * @return builder
         * 
         */
        public Builder model(String model) {
            return model(Output.of(model));
        }

        public DomainTpmArgs build() {
            return $;
        }
    }

}
