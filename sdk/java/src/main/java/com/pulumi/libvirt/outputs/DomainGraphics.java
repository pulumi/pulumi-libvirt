// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.libvirt.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainGraphics {
    /**
     * @return defaults to &#34;yes&#34;
     * 
     */
    private final @Nullable Boolean autoport;
    /**
     * @return IP Address where the VNC listener should be started if
     * `listen_type` is set to `address`. Defaults to 127.0.0.1
     * 
     */
    private final @Nullable String listenAddress;
    /**
     * @return &#34;listen type&#34;, defaults to &#34;none&#34;
     * 
     */
    private final @Nullable String listenType;
    /**
     * @return Console device type. Valid values are &#34;pty&#34; and &#34;tcp&#34;.
     * 
     */
    private final @Nullable String type;
    /**
     * @return Port to listen on for VNC WebSocket functionality (-1 meaning auto-allocation)
     * 
     */
    private final @Nullable Integer websocket;

    @CustomType.Constructor
    private DomainGraphics(
        @CustomType.Parameter("autoport") @Nullable Boolean autoport,
        @CustomType.Parameter("listenAddress") @Nullable String listenAddress,
        @CustomType.Parameter("listenType") @Nullable String listenType,
        @CustomType.Parameter("type") @Nullable String type,
        @CustomType.Parameter("websocket") @Nullable Integer websocket) {
        this.autoport = autoport;
        this.listenAddress = listenAddress;
        this.listenType = listenType;
        this.type = type;
        this.websocket = websocket;
    }

    /**
     * @return defaults to &#34;yes&#34;
     * 
     */
    public Optional<Boolean> autoport() {
        return Optional.ofNullable(this.autoport);
    }
    /**
     * @return IP Address where the VNC listener should be started if
     * `listen_type` is set to `address`. Defaults to 127.0.0.1
     * 
     */
    public Optional<String> listenAddress() {
        return Optional.ofNullable(this.listenAddress);
    }
    /**
     * @return &#34;listen type&#34;, defaults to &#34;none&#34;
     * 
     */
    public Optional<String> listenType() {
        return Optional.ofNullable(this.listenType);
    }
    /**
     * @return Console device type. Valid values are &#34;pty&#34; and &#34;tcp&#34;.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return Port to listen on for VNC WebSocket functionality (-1 meaning auto-allocation)
     * 
     */
    public Optional<Integer> websocket() {
        return Optional.ofNullable(this.websocket);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainGraphics defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean autoport;
        private @Nullable String listenAddress;
        private @Nullable String listenType;
        private @Nullable String type;
        private @Nullable Integer websocket;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainGraphics defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoport = defaults.autoport;
    	      this.listenAddress = defaults.listenAddress;
    	      this.listenType = defaults.listenType;
    	      this.type = defaults.type;
    	      this.websocket = defaults.websocket;
        }

        public Builder autoport(@Nullable Boolean autoport) {
            this.autoport = autoport;
            return this;
        }
        public Builder listenAddress(@Nullable String listenAddress) {
            this.listenAddress = listenAddress;
            return this;
        }
        public Builder listenType(@Nullable String listenType) {
            this.listenType = listenType;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public Builder websocket(@Nullable Integer websocket) {
            this.websocket = websocket;
            return this;
        }        public DomainGraphics build() {
            return new DomainGraphics(autoport, listenAddress, listenType, type, websocket);
        }
    }
}
