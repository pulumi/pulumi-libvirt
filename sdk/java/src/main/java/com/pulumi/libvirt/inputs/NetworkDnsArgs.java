// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.libvirt.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.libvirt.inputs.NetworkDnsForwarderArgs;
import com.pulumi.libvirt.inputs.NetworkDnsHostArgs;
import com.pulumi.libvirt.inputs.NetworkDnsSrvArgs;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkDnsArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkDnsArgs Empty = new NetworkDnsArgs();

    /**
     * when false, disable the DHCP server
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return when false, disable the DHCP server
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Either `address`, `domain`, or both must be set
     * 
     */
    @Import(name="forwarders")
    private @Nullable Output<List<NetworkDnsForwarderArgs>> forwarders;

    /**
     * @return Either `address`, `domain`, or both must be set
     * 
     */
    public Optional<Output<List<NetworkDnsForwarderArgs>>> forwarders() {
        return Optional.ofNullable(this.forwarders);
    }

    /**
     * a DNS host entry block. You can have one or more of these
     * blocks in your DNS definition. You must specify both `ip` and `hostname`.
     * 
     * An advanced example of round-robin DNS (using DNS host templates) follows:
     * 
     * An advanced example of setting up multiple SRV records using DNS SRV templates is:
     * 
     */
    @Import(name="hosts")
    private @Nullable Output<List<NetworkDnsHostArgs>> hosts;

    /**
     * @return a DNS host entry block. You can have one or more of these
     * blocks in your DNS definition. You must specify both `ip` and `hostname`.
     * 
     * An advanced example of round-robin DNS (using DNS host templates) follows:
     * 
     * An advanced example of setting up multiple SRV records using DNS SRV templates is:
     * 
     */
    public Optional<Output<List<NetworkDnsHostArgs>>> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    /**
     * true/false: true means &#39;do not forward unresolved requests for this domain to the part DNS server
     * 
     */
    @Import(name="localOnly")
    private @Nullable Output<Boolean> localOnly;

    /**
     * @return true/false: true means &#39;do not forward unresolved requests for this domain to the part DNS server
     * 
     */
    public Optional<Output<Boolean>> localOnly() {
        return Optional.ofNullable(this.localOnly);
    }

    /**
     * a DNS SRV entry block. You can have one or more of these blocks
     * in your DNS definition. You must specify `service` and `protocol`.
     * 
     */
    @Import(name="srvs")
    private @Nullable Output<List<NetworkDnsSrvArgs>> srvs;

    /**
     * @return a DNS SRV entry block. You can have one or more of these blocks
     * in your DNS definition. You must specify `service` and `protocol`.
     * 
     */
    public Optional<Output<List<NetworkDnsSrvArgs>>> srvs() {
        return Optional.ofNullable(this.srvs);
    }

    private NetworkDnsArgs() {}

    private NetworkDnsArgs(NetworkDnsArgs $) {
        this.enabled = $.enabled;
        this.forwarders = $.forwarders;
        this.hosts = $.hosts;
        this.localOnly = $.localOnly;
        this.srvs = $.srvs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkDnsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkDnsArgs $;

        public Builder() {
            $ = new NetworkDnsArgs();
        }

        public Builder(NetworkDnsArgs defaults) {
            $ = new NetworkDnsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled when false, disable the DHCP server
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled when false, disable the DHCP server
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param forwarders Either `address`, `domain`, or both must be set
         * 
         * @return builder
         * 
         */
        public Builder forwarders(@Nullable Output<List<NetworkDnsForwarderArgs>> forwarders) {
            $.forwarders = forwarders;
            return this;
        }

        /**
         * @param forwarders Either `address`, `domain`, or both must be set
         * 
         * @return builder
         * 
         */
        public Builder forwarders(List<NetworkDnsForwarderArgs> forwarders) {
            return forwarders(Output.of(forwarders));
        }

        /**
         * @param forwarders Either `address`, `domain`, or both must be set
         * 
         * @return builder
         * 
         */
        public Builder forwarders(NetworkDnsForwarderArgs... forwarders) {
            return forwarders(List.of(forwarders));
        }

        /**
         * @param hosts a DNS host entry block. You can have one or more of these
         * blocks in your DNS definition. You must specify both `ip` and `hostname`.
         * 
         * An advanced example of round-robin DNS (using DNS host templates) follows:
         * 
         * An advanced example of setting up multiple SRV records using DNS SRV templates is:
         * 
         * @return builder
         * 
         */
        public Builder hosts(@Nullable Output<List<NetworkDnsHostArgs>> hosts) {
            $.hosts = hosts;
            return this;
        }

        /**
         * @param hosts a DNS host entry block. You can have one or more of these
         * blocks in your DNS definition. You must specify both `ip` and `hostname`.
         * 
         * An advanced example of round-robin DNS (using DNS host templates) follows:
         * 
         * An advanced example of setting up multiple SRV records using DNS SRV templates is:
         * 
         * @return builder
         * 
         */
        public Builder hosts(List<NetworkDnsHostArgs> hosts) {
            return hosts(Output.of(hosts));
        }

        /**
         * @param hosts a DNS host entry block. You can have one or more of these
         * blocks in your DNS definition. You must specify both `ip` and `hostname`.
         * 
         * An advanced example of round-robin DNS (using DNS host templates) follows:
         * 
         * An advanced example of setting up multiple SRV records using DNS SRV templates is:
         * 
         * @return builder
         * 
         */
        public Builder hosts(NetworkDnsHostArgs... hosts) {
            return hosts(List.of(hosts));
        }

        /**
         * @param localOnly true/false: true means &#39;do not forward unresolved requests for this domain to the part DNS server
         * 
         * @return builder
         * 
         */
        public Builder localOnly(@Nullable Output<Boolean> localOnly) {
            $.localOnly = localOnly;
            return this;
        }

        /**
         * @param localOnly true/false: true means &#39;do not forward unresolved requests for this domain to the part DNS server
         * 
         * @return builder
         * 
         */
        public Builder localOnly(Boolean localOnly) {
            return localOnly(Output.of(localOnly));
        }

        /**
         * @param srvs a DNS SRV entry block. You can have one or more of these blocks
         * in your DNS definition. You must specify `service` and `protocol`.
         * 
         * @return builder
         * 
         */
        public Builder srvs(@Nullable Output<List<NetworkDnsSrvArgs>> srvs) {
            $.srvs = srvs;
            return this;
        }

        /**
         * @param srvs a DNS SRV entry block. You can have one or more of these blocks
         * in your DNS definition. You must specify `service` and `protocol`.
         * 
         * @return builder
         * 
         */
        public Builder srvs(List<NetworkDnsSrvArgs> srvs) {
            return srvs(Output.of(srvs));
        }

        /**
         * @param srvs a DNS SRV entry block. You can have one or more of these blocks
         * in your DNS definition. You must specify `service` and `protocol`.
         * 
         * @return builder
         * 
         */
        public Builder srvs(NetworkDnsSrvArgs... srvs) {
            return srvs(List.of(srvs));
        }

        public NetworkDnsArgs build() {
            return $;
        }
    }

}
