// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.libvirt.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNodeDevicesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNodeDevicesArgs Empty = new GetNodeDevicesArgs();

    /**
     * The type of device, used to filter the output by capability type.
     * Can be one of `system`, `pci`, `usb_device`,  `usb`,  `net`,  `scsi_host`,
     * `scsi_target`,  `scsi`,  `storage`, `fc_host`,  `vports`, `scsi_generic`, `drm`,
     * `mdev`, `mdev_types`, `ccw`, `css`, `ap_card`, `ap_queue`, `ap_matrix`.
     * Defaults to all active devices.
     * 
     */
    @Import(name="capability")
    private @Nullable Output<String> capability;

    /**
     * @return The type of device, used to filter the output by capability type.
     * Can be one of `system`, `pci`, `usb_device`,  `usb`,  `net`,  `scsi_host`,
     * `scsi_target`,  `scsi`,  `storage`, `fc_host`,  `vports`, `scsi_generic`, `drm`,
     * `mdev`, `mdev_types`, `ccw`, `css`, `ap_card`, `ap_queue`, `ap_matrix`.
     * Defaults to all active devices.
     * 
     */
    public Optional<Output<String>> capability() {
        return Optional.ofNullable(this.capability);
    }

    private GetNodeDevicesArgs() {}

    private GetNodeDevicesArgs(GetNodeDevicesArgs $) {
        this.capability = $.capability;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodeDevicesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodeDevicesArgs $;

        public Builder() {
            $ = new GetNodeDevicesArgs();
        }

        public Builder(GetNodeDevicesArgs defaults) {
            $ = new GetNodeDevicesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capability The type of device, used to filter the output by capability type.
         * Can be one of `system`, `pci`, `usb_device`,  `usb`,  `net`,  `scsi_host`,
         * `scsi_target`,  `scsi`,  `storage`, `fc_host`,  `vports`, `scsi_generic`, `drm`,
         * `mdev`, `mdev_types`, `ccw`, `css`, `ap_card`, `ap_queue`, `ap_matrix`.
         * Defaults to all active devices.
         * 
         * @return builder
         * 
         */
        public Builder capability(@Nullable Output<String> capability) {
            $.capability = capability;
            return this;
        }

        /**
         * @param capability The type of device, used to filter the output by capability type.
         * Can be one of `system`, `pci`, `usb_device`,  `usb`,  `net`,  `scsi_host`,
         * `scsi_target`,  `scsi`,  `storage`, `fc_host`,  `vports`, `scsi_generic`, `drm`,
         * `mdev`, `mdev_types`, `ccw`, `css`, `ap_card`, `ap_queue`, `ap_matrix`.
         * Defaults to all active devices.
         * 
         * @return builder
         * 
         */
        public Builder capability(String capability) {
            return capability(Output.of(capability));
        }

        public GetNodeDevicesArgs build() {
            return $;
        }
    }

}
