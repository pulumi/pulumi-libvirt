// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.libvirt.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.libvirt.outputs.GetNodeDeviceInfoCapability;
import com.pulumi.libvirt.outputs.GetNodeDeviceInfoDevnode;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNodeDeviceInfoResult {
    /**
     * @return Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
     * 
     */
    private GetNodeDeviceInfoCapability capability;
    /**
     * @return For type `drm` holds the `path` and `link` that point to the device
     * 
     */
    private List<GetNodeDeviceInfoDevnode> devnodes;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    /**
     * @return The parent of this device in the hierarchy
     * 
     */
    private String parent;
    /**
     * @return Full path of the device
     * 
     */
    private String path;
    /**
     * @return The XML returned by the libvirt API call
     * 
     */
    private String xml;

    private GetNodeDeviceInfoResult() {}
    /**
     * @return Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
     * 
     */
    public GetNodeDeviceInfoCapability capability() {
        return this.capability;
    }
    /**
     * @return For type `drm` holds the `path` and `link` that point to the device
     * 
     */
    public List<GetNodeDeviceInfoDevnode> devnodes() {
        return this.devnodes;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The parent of this device in the hierarchy
     * 
     */
    public String parent() {
        return this.parent;
    }
    /**
     * @return Full path of the device
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return The XML returned by the libvirt API call
     * 
     */
    public String xml() {
        return this.xml;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeDeviceInfoResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetNodeDeviceInfoCapability capability;
        private List<GetNodeDeviceInfoDevnode> devnodes;
        private String id;
        private String name;
        private String parent;
        private String path;
        private String xml;
        public Builder() {}
        public Builder(GetNodeDeviceInfoResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capability = defaults.capability;
    	      this.devnodes = defaults.devnodes;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.parent = defaults.parent;
    	      this.path = defaults.path;
    	      this.xml = defaults.xml;
        }

        @CustomType.Setter
        public Builder capability(GetNodeDeviceInfoCapability capability) {
            if (capability == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoResult", "capability");
            }
            this.capability = capability;
            return this;
        }
        @CustomType.Setter
        public Builder devnodes(List<GetNodeDeviceInfoDevnode> devnodes) {
            if (devnodes == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoResult", "devnodes");
            }
            this.devnodes = devnodes;
            return this;
        }
        public Builder devnodes(GetNodeDeviceInfoDevnode... devnodes) {
            return devnodes(List.of(devnodes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parent(String parent) {
            if (parent == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoResult", "parent");
            }
            this.parent = parent;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoResult", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder xml(String xml) {
            if (xml == null) {
              throw new MissingRequiredPropertyException("GetNodeDeviceInfoResult", "xml");
            }
            this.xml = xml;
            return this;
        }
        public GetNodeDeviceInfoResult build() {
            final var _resultValue = new GetNodeDeviceInfoResult();
            _resultValue.capability = capability;
            _resultValue.devnodes = devnodes;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.parent = parent;
            _resultValue.path = path;
            _resultValue.xml = xml;
            return _resultValue;
        }
    }
}
