// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.libvirt.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainConsole {
    /**
     * @return IP address to listen on. Defaults to 127.0.0.1.
     * 
     */
    private @Nullable String sourceHost;
    /**
     * @return Source path
     * 
     */
    private @Nullable String sourcePath;
    /**
     * @return Port number or a service name. Defaults to a
     * random port.
     * 
     */
    private @Nullable String sourceService;
    /**
     * @return Target port
     * 
     */
    private String targetPort;
    /**
     * @return for the first console and defaults to `serial`.
     * Subsequent `console` blocks must have a different type - usually `virtio`.
     * 
     */
    private @Nullable String targetType;
    /**
     * @return the type of graphics emulation (default is &#34;spice&#34;)
     * 
     */
    private String type;

    private DomainConsole() {}
    /**
     * @return IP address to listen on. Defaults to 127.0.0.1.
     * 
     */
    public Optional<String> sourceHost() {
        return Optional.ofNullable(this.sourceHost);
    }
    /**
     * @return Source path
     * 
     */
    public Optional<String> sourcePath() {
        return Optional.ofNullable(this.sourcePath);
    }
    /**
     * @return Port number or a service name. Defaults to a
     * random port.
     * 
     */
    public Optional<String> sourceService() {
        return Optional.ofNullable(this.sourceService);
    }
    /**
     * @return Target port
     * 
     */
    public String targetPort() {
        return this.targetPort;
    }
    /**
     * @return for the first console and defaults to `serial`.
     * Subsequent `console` blocks must have a different type - usually `virtio`.
     * 
     */
    public Optional<String> targetType() {
        return Optional.ofNullable(this.targetType);
    }
    /**
     * @return the type of graphics emulation (default is &#34;spice&#34;)
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainConsole defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String sourceHost;
        private @Nullable String sourcePath;
        private @Nullable String sourceService;
        private String targetPort;
        private @Nullable String targetType;
        private String type;
        public Builder() {}
        public Builder(DomainConsole defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.sourceHost = defaults.sourceHost;
    	      this.sourcePath = defaults.sourcePath;
    	      this.sourceService = defaults.sourceService;
    	      this.targetPort = defaults.targetPort;
    	      this.targetType = defaults.targetType;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder sourceHost(@Nullable String sourceHost) {
            this.sourceHost = sourceHost;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePath(@Nullable String sourcePath) {
            this.sourcePath = sourcePath;
            return this;
        }
        @CustomType.Setter
        public Builder sourceService(@Nullable String sourceService) {
            this.sourceService = sourceService;
            return this;
        }
        @CustomType.Setter
        public Builder targetPort(String targetPort) {
            this.targetPort = Objects.requireNonNull(targetPort);
            return this;
        }
        @CustomType.Setter
        public Builder targetType(@Nullable String targetType) {
            this.targetType = targetType;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public DomainConsole build() {
            final var o = new DomainConsole();
            o.sourceHost = sourceHost;
            o.sourcePath = sourcePath;
            o.sourceService = sourceService;
            o.targetPort = targetPort;
            o.targetType = targetType;
            o.type = type;
            return o;
        }
    }
}
