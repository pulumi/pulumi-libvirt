// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.libvirt.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainGraphicsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainGraphicsArgs Empty = new DomainGraphicsArgs();

    /**
     * defaults to &#34;yes&#34;
     * 
     */
    @Import(name="autoport")
    private @Nullable Output<Boolean> autoport;

    /**
     * @return defaults to &#34;yes&#34;
     * 
     */
    public Optional<Output<Boolean>> autoport() {
        return Optional.ofNullable(this.autoport);
    }

    /**
     * IP Address where the VNC listener should be started if
     * `listen_type` is set to `address`. Defaults to 127.0.0.1
     * 
     */
    @Import(name="listenAddress")
    private @Nullable Output<String> listenAddress;

    /**
     * @return IP Address where the VNC listener should be started if
     * `listen_type` is set to `address`. Defaults to 127.0.0.1
     * 
     */
    public Optional<Output<String>> listenAddress() {
        return Optional.ofNullable(this.listenAddress);
    }

    /**
     * &#34;listen type&#34;, defaults to &#34;none&#34;
     * 
     */
    @Import(name="listenType")
    private @Nullable Output<String> listenType;

    /**
     * @return &#34;listen type&#34;, defaults to &#34;none&#34;
     * 
     */
    public Optional<Output<String>> listenType() {
        return Optional.ofNullable(this.listenType);
    }

    /**
     * Console device type. Valid values are &#34;pty&#34; and &#34;tcp&#34;.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Console device type. Valid values are &#34;pty&#34; and &#34;tcp&#34;.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Port to listen on for VNC WebSocket functionality (-1 meaning auto-allocation)
     * 
     * On occasion we have found it necessary to set a `type` of `vnc` and a
     * `listen_type` of `address` with certain builds of QEMU.
     * 
     * With `listen_address` it is possible to specify a listener address for the virtual
     * machines VNC server. Usually this is an IP of the host system.
     * 
     * The `graphics` block will look as follows:
     * 
     * The video card type can be changed from libvirt default `cirrus` to
     * `vga` or others as described in [Video Card Elements](https://libvirt.org/formatdomain.html#elementsVideo)
     * 
     * &gt; **Note well:** the `graphics` block is ignored for the architectures
     * `s390x` and `ppc64`.
     * 
     */
    @Import(name="websocket")
    private @Nullable Output<Integer> websocket;

    /**
     * @return Port to listen on for VNC WebSocket functionality (-1 meaning auto-allocation)
     * 
     * On occasion we have found it necessary to set a `type` of `vnc` and a
     * `listen_type` of `address` with certain builds of QEMU.
     * 
     * With `listen_address` it is possible to specify a listener address for the virtual
     * machines VNC server. Usually this is an IP of the host system.
     * 
     * The `graphics` block will look as follows:
     * 
     * The video card type can be changed from libvirt default `cirrus` to
     * `vga` or others as described in [Video Card Elements](https://libvirt.org/formatdomain.html#elementsVideo)
     * 
     * &gt; **Note well:** the `graphics` block is ignored for the architectures
     * `s390x` and `ppc64`.
     * 
     */
    public Optional<Output<Integer>> websocket() {
        return Optional.ofNullable(this.websocket);
    }

    private DomainGraphicsArgs() {}

    private DomainGraphicsArgs(DomainGraphicsArgs $) {
        this.autoport = $.autoport;
        this.listenAddress = $.listenAddress;
        this.listenType = $.listenType;
        this.type = $.type;
        this.websocket = $.websocket;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainGraphicsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainGraphicsArgs $;

        public Builder() {
            $ = new DomainGraphicsArgs();
        }

        public Builder(DomainGraphicsArgs defaults) {
            $ = new DomainGraphicsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoport defaults to &#34;yes&#34;
         * 
         * @return builder
         * 
         */
        public Builder autoport(@Nullable Output<Boolean> autoport) {
            $.autoport = autoport;
            return this;
        }

        /**
         * @param autoport defaults to &#34;yes&#34;
         * 
         * @return builder
         * 
         */
        public Builder autoport(Boolean autoport) {
            return autoport(Output.of(autoport));
        }

        /**
         * @param listenAddress IP Address where the VNC listener should be started if
         * `listen_type` is set to `address`. Defaults to 127.0.0.1
         * 
         * @return builder
         * 
         */
        public Builder listenAddress(@Nullable Output<String> listenAddress) {
            $.listenAddress = listenAddress;
            return this;
        }

        /**
         * @param listenAddress IP Address where the VNC listener should be started if
         * `listen_type` is set to `address`. Defaults to 127.0.0.1
         * 
         * @return builder
         * 
         */
        public Builder listenAddress(String listenAddress) {
            return listenAddress(Output.of(listenAddress));
        }

        /**
         * @param listenType &#34;listen type&#34;, defaults to &#34;none&#34;
         * 
         * @return builder
         * 
         */
        public Builder listenType(@Nullable Output<String> listenType) {
            $.listenType = listenType;
            return this;
        }

        /**
         * @param listenType &#34;listen type&#34;, defaults to &#34;none&#34;
         * 
         * @return builder
         * 
         */
        public Builder listenType(String listenType) {
            return listenType(Output.of(listenType));
        }

        /**
         * @param type Console device type. Valid values are &#34;pty&#34; and &#34;tcp&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Console device type. Valid values are &#34;pty&#34; and &#34;tcp&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param websocket Port to listen on for VNC WebSocket functionality (-1 meaning auto-allocation)
         * 
         * On occasion we have found it necessary to set a `type` of `vnc` and a
         * `listen_type` of `address` with certain builds of QEMU.
         * 
         * With `listen_address` it is possible to specify a listener address for the virtual
         * machines VNC server. Usually this is an IP of the host system.
         * 
         * The `graphics` block will look as follows:
         * 
         * The video card type can be changed from libvirt default `cirrus` to
         * `vga` or others as described in [Video Card Elements](https://libvirt.org/formatdomain.html#elementsVideo)
         * 
         * &gt; **Note well:** the `graphics` block is ignored for the architectures
         * `s390x` and `ppc64`.
         * 
         * @return builder
         * 
         */
        public Builder websocket(@Nullable Output<Integer> websocket) {
            $.websocket = websocket;
            return this;
        }

        /**
         * @param websocket Port to listen on for VNC WebSocket functionality (-1 meaning auto-allocation)
         * 
         * On occasion we have found it necessary to set a `type` of `vnc` and a
         * `listen_type` of `address` with certain builds of QEMU.
         * 
         * With `listen_address` it is possible to specify a listener address for the virtual
         * machines VNC server. Usually this is an IP of the host system.
         * 
         * The `graphics` block will look as follows:
         * 
         * The video card type can be changed from libvirt default `cirrus` to
         * `vga` or others as described in [Video Card Elements](https://libvirt.org/formatdomain.html#elementsVideo)
         * 
         * &gt; **Note well:** the `graphics` block is ignored for the architectures
         * `s390x` and `ppc64`.
         * 
         * @return builder
         * 
         */
        public Builder websocket(Integer websocket) {
            return websocket(Output.of(websocket));
        }

        public DomainGraphicsArgs build() {
            return $;
        }
    }

}
