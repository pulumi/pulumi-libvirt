// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.libvirt.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.libvirt.inputs.DomainBootDeviceArgs;
import com.pulumi.libvirt.inputs.DomainConsoleArgs;
import com.pulumi.libvirt.inputs.DomainCpuArgs;
import com.pulumi.libvirt.inputs.DomainDiskArgs;
import com.pulumi.libvirt.inputs.DomainFilesystemArgs;
import com.pulumi.libvirt.inputs.DomainGraphicsArgs;
import com.pulumi.libvirt.inputs.DomainNetworkInterfaceArgs;
import com.pulumi.libvirt.inputs.DomainNvramArgs;
import com.pulumi.libvirt.inputs.DomainTpmArgs;
import com.pulumi.libvirt.inputs.DomainVideoArgs;
import com.pulumi.libvirt.inputs.DomainXmlArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainState extends com.pulumi.resources.ResourceArgs {

    public static final DomainState Empty = new DomainState();

    /**
     * The architecture for the VM (probably x86_64 or i686),
     * you normally won&#39;t need to set this unless you are building a special VM
     * 
     */
    @Import(name="arch")
    private @Nullable Output<String> arch;

    /**
     * @return The architecture for the VM (probably x86_64 or i686),
     * you normally won&#39;t need to set this unless you are building a special VM
     * 
     */
    public Optional<Output<String>> arch() {
        return Optional.ofNullable(this.arch);
    }

    /**
     * Set to `true` to start the domain on host boot up.
     * If not specified `false` is assumed.
     * 
     */
    @Import(name="autostart")
    private @Nullable Output<Boolean> autostart;

    /**
     * @return Set to `true` to start the domain on host boot up.
     * If not specified `false` is assumed.
     * 
     */
    public Optional<Output<Boolean>> autostart() {
        return Optional.ofNullable(this.autostart);
    }

    /**
     * A list of devices (dev) which defines boot order. Example
     * below.
     * 
     */
    @Import(name="bootDevices")
    private @Nullable Output<List<DomainBootDeviceArgs>> bootDevices;

    /**
     * @return A list of devices (dev) which defines boot order. Example
     * below.
     * 
     */
    public Optional<Output<List<DomainBootDeviceArgs>>> bootDevices() {
        return Optional.ofNullable(this.bootDevices);
    }

    /**
     * The `libvirt.CloudInitDisk` disk that has to be used by
     * the domain. This is going to be attached as a CDROM ISO. Changing the
     * cloud-init won&#39;t cause the domain to be recreated, however the change will
     * have effect on the next reboot.
     * 
     */
    @Import(name="cloudinit")
    private @Nullable Output<String> cloudinit;

    /**
     * @return The `libvirt.CloudInitDisk` disk that has to be used by
     * the domain. This is going to be attached as a CDROM ISO. Changing the
     * cloud-init won&#39;t cause the domain to be recreated, however the change will
     * have effect on the next reboot.
     * 
     */
    public Optional<Output<String>> cloudinit() {
        return Optional.ofNullable(this.cloudinit);
    }

    /**
     * Arguments to the kernel
     * 
     */
    @Import(name="cmdlines")
    private @Nullable Output<List<Map<String,Object>>> cmdlines;

    /**
     * @return Arguments to the kernel
     * 
     */
    public Optional<Output<List<Map<String,Object>>>> cmdlines() {
        return Optional.ofNullable(this.cmdlines);
    }

    @Import(name="consoles")
    private @Nullable Output<List<DomainConsoleArgs>> consoles;

    public Optional<Output<List<DomainConsoleArgs>>> consoles() {
        return Optional.ofNullable(this.consoles);
    }

    /**
     * The
     * [libvirt.Ignition](https://www.terraform.io/docs/providers/libvirt/r/coreos_ignition.html) resource
     * that is to be used by the CoreOS domain.
     * 
     */
    @Import(name="coreosIgnition")
    private @Nullable Output<String> coreosIgnition;

    /**
     * @return The
     * [libvirt.Ignition](https://www.terraform.io/docs/providers/libvirt/r/coreos_ignition.html) resource
     * that is to be used by the CoreOS domain.
     * 
     */
    public Optional<Output<String>> coreosIgnition() {
        return Optional.ofNullable(this.coreosIgnition);
    }

    /**
     * Configures CPU mode. See below for more
     * details.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<DomainCpuArgs> cpu;

    /**
     * @return Configures CPU mode. See below for more
     * details.
     * 
     */
    public Optional<Output<DomainCpuArgs>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * The description for domain.
     * Changing this forces a new resource to be created.
     * This data is not used by libvirt in any way, it can contain any information the user wants.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description for domain.
     * Changing this forces a new resource to be created.
     * This data is not used by libvirt in any way, it can contain any information the user wants.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * An array of one or more disks to attach to the domain. The
     * `disk` object structure is documented below.
     * 
     */
    @Import(name="disks")
    private @Nullable Output<List<DomainDiskArgs>> disks;

    /**
     * @return An array of one or more disks to attach to the domain. The
     * `disk` object structure is documented below.
     * 
     */
    public Optional<Output<List<DomainDiskArgs>>> disks() {
        return Optional.ofNullable(this.disks);
    }

    /**
     * The path of the emulator to use
     * 
     */
    @Import(name="emulator")
    private @Nullable Output<String> emulator;

    /**
     * @return The path of the emulator to use
     * 
     */
    public Optional<Output<String>> emulator() {
        return Optional.ofNullable(this.emulator);
    }

    /**
     * An array of one or more host filesystems to attach to
     * the domain. The `filesystem` object structure is documented
     * below.
     * 
     */
    @Import(name="filesystems")
    private @Nullable Output<List<DomainFilesystemArgs>> filesystems;

    /**
     * @return An array of one or more host filesystems to attach to
     * the domain. The `filesystem` object structure is documented
     * below.
     * 
     */
    public Optional<Output<List<DomainFilesystemArgs>>> filesystems() {
        return Optional.ofNullable(this.filesystems);
    }

    /**
     * The UEFI rom images for exercising UEFI secure boot in a qemu
     * environment. Users should usually specify one of the standard _Open Virtual Machine
     * Firmware_ (_OVMF_) images available for their distributions. The file will be opened
     * read-only.
     * 
     */
    @Import(name="firmware")
    private @Nullable Output<String> firmware;

    /**
     * @return The UEFI rom images for exercising UEFI secure boot in a qemu
     * environment. Users should usually specify one of the standard _Open Virtual Machine
     * Firmware_ (_OVMF_) images available for their distributions. The file will be opened
     * read-only.
     * 
     */
    public Optional<Output<String>> firmware() {
        return Optional.ofNullable(this.firmware);
    }

    /**
     * The name of the firmware config path where ignition file is stored: default is `opt/com.coreos/config`. If you are using [Flatcar Linux](https://docs.flatcar-linux.org/os/booting-with-libvirt/#creating-the-domain-xml), the value is `opt/org.flatcar-linux/config`.
     * 
     */
    @Import(name="fwCfgName")
    private @Nullable Output<String> fwCfgName;

    /**
     * @return The name of the firmware config path where ignition file is stored: default is `opt/com.coreos/config`. If you are using [Flatcar Linux](https://docs.flatcar-linux.org/os/booting-with-libvirt/#creating-the-domain-xml), the value is `opt/org.flatcar-linux/config`.
     * 
     */
    public Optional<Output<String>> fwCfgName() {
        return Optional.ofNullable(this.fwCfgName);
    }

    @Import(name="graphics")
    private @Nullable Output<DomainGraphicsArgs> graphics;

    public Optional<Output<DomainGraphicsArgs>> graphics() {
        return Optional.ofNullable(this.graphics);
    }

    /**
     * The path of the initrd to boot.
     * 
     */
    @Import(name="initrd")
    private @Nullable Output<String> initrd;

    /**
     * @return The path of the initrd to boot.
     * 
     */
    public Optional<Output<String>> initrd() {
        return Optional.ofNullable(this.initrd);
    }

    /**
     * The path of the kernel to boot
     * 
     */
    @Import(name="kernel")
    private @Nullable Output<String> kernel;

    /**
     * @return The path of the kernel to boot
     * 
     */
    public Optional<Output<String>> kernel() {
        return Optional.ofNullable(this.kernel);
    }

    /**
     * The machine type,
     * you normally won&#39;t need to set this unless you are running on a platform that
     * defaults to the wrong machine type for your template
     * 
     */
    @Import(name="machine")
    private @Nullable Output<String> machine;

    /**
     * @return The machine type,
     * you normally won&#39;t need to set this unless you are running on a platform that
     * defaults to the wrong machine type for your template
     * 
     */
    public Optional<Output<String>> machine() {
        return Optional.ofNullable(this.machine);
    }

    /**
     * The amount of memory in MiB. If not specified the domain
     * will be created with 512 MiB of memory be used.
     * 
     */
    @Import(name="memory")
    private @Nullable Output<Integer> memory;

    /**
     * @return The amount of memory in MiB. If not specified the domain
     * will be created with 512 MiB of memory be used.
     * 
     */
    public Optional<Output<Integer>> memory() {
        return Optional.ofNullable(this.memory);
    }

    @Import(name="metadata")
    private @Nullable Output<String> metadata;

    public Optional<Output<String>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * A unique name for the resource, required by libvirt.
     * Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A unique name for the resource, required by libvirt.
     * Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * An array of one or more network interfaces to
     * attach to the domain. The `network_interface` object structure is documented
     * below.
     * 
     */
    @Import(name="networkInterfaces")
    private @Nullable Output<List<DomainNetworkInterfaceArgs>> networkInterfaces;

    /**
     * @return An array of one or more network interfaces to
     * attach to the domain. The `network_interface` object structure is documented
     * below.
     * 
     */
    public Optional<Output<List<DomainNetworkInterfaceArgs>>> networkInterfaces() {
        return Optional.ofNullable(this.networkInterfaces);
    }

    /**
     * this block allows specifying the following attributes related to the _nvram_:
     * 
     */
    @Import(name="nvram")
    private @Nullable Output<DomainNvramArgs> nvram;

    /**
     * @return this block allows specifying the following attributes related to the _nvram_:
     * 
     */
    public Optional<Output<DomainNvramArgs>> nvram() {
        return Optional.ofNullable(this.nvram);
    }

    /**
     * By default is disabled, set to true for enabling it. More info [qemu-agent](https://wiki.libvirt.org/page/Qemu_guest_agent).
     * 
     */
    @Import(name="qemuAgent")
    private @Nullable Output<Boolean> qemuAgent;

    /**
     * @return By default is disabled, set to true for enabling it. More info [qemu-agent](https://wiki.libvirt.org/page/Qemu_guest_agent).
     * 
     */
    public Optional<Output<Boolean>> qemuAgent() {
        return Optional.ofNullable(this.qemuAgent);
    }

    /**
     * Use `false` to turn off the instance. If not specified,
     * true is assumed and the instance, if stopped, will be started at next apply.
     * 
     */
    @Import(name="running")
    private @Nullable Output<Boolean> running;

    /**
     * @return Use `false` to turn off the instance. If not specified,
     * true is assumed and the instance, if stopped, will be started at next apply.
     * 
     */
    public Optional<Output<Boolean>> running() {
        return Optional.ofNullable(this.running);
    }

    /**
     * TPM device to attach to the domain. The `tpm` object structure is documented below.
     * 
     */
    @Import(name="tpm")
    private @Nullable Output<DomainTpmArgs> tpm;

    /**
     * @return TPM device to attach to the domain. The `tpm` object structure is documented below.
     * 
     */
    public Optional<Output<DomainTpmArgs>> tpm() {
        return Optional.ofNullable(this.tpm);
    }

    /**
     * The amount of virtual CPUs. If not specified, a single CPU
     * will be created.
     * 
     */
    @Import(name="vcpu")
    private @Nullable Output<Integer> vcpu;

    /**
     * @return The amount of virtual CPUs. If not specified, a single CPU
     * will be created.
     * 
     */
    public Optional<Output<Integer>> vcpu() {
        return Optional.ofNullable(this.vcpu);
    }

    @Import(name="video")
    private @Nullable Output<DomainVideoArgs> video;

    public Optional<Output<DomainVideoArgs>> video() {
        return Optional.ofNullable(this.video);
    }

    @Import(name="xml")
    private @Nullable Output<DomainXmlArgs> xml;

    public Optional<Output<DomainXmlArgs>> xml() {
        return Optional.ofNullable(this.xml);
    }

    private DomainState() {}

    private DomainState(DomainState $) {
        this.arch = $.arch;
        this.autostart = $.autostart;
        this.bootDevices = $.bootDevices;
        this.cloudinit = $.cloudinit;
        this.cmdlines = $.cmdlines;
        this.consoles = $.consoles;
        this.coreosIgnition = $.coreosIgnition;
        this.cpu = $.cpu;
        this.description = $.description;
        this.disks = $.disks;
        this.emulator = $.emulator;
        this.filesystems = $.filesystems;
        this.firmware = $.firmware;
        this.fwCfgName = $.fwCfgName;
        this.graphics = $.graphics;
        this.initrd = $.initrd;
        this.kernel = $.kernel;
        this.machine = $.machine;
        this.memory = $.memory;
        this.metadata = $.metadata;
        this.name = $.name;
        this.networkInterfaces = $.networkInterfaces;
        this.nvram = $.nvram;
        this.qemuAgent = $.qemuAgent;
        this.running = $.running;
        this.tpm = $.tpm;
        this.vcpu = $.vcpu;
        this.video = $.video;
        this.xml = $.xml;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainState $;

        public Builder() {
            $ = new DomainState();
        }

        public Builder(DomainState defaults) {
            $ = new DomainState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arch The architecture for the VM (probably x86_64 or i686),
         * you normally won&#39;t need to set this unless you are building a special VM
         * 
         * @return builder
         * 
         */
        public Builder arch(@Nullable Output<String> arch) {
            $.arch = arch;
            return this;
        }

        /**
         * @param arch The architecture for the VM (probably x86_64 or i686),
         * you normally won&#39;t need to set this unless you are building a special VM
         * 
         * @return builder
         * 
         */
        public Builder arch(String arch) {
            return arch(Output.of(arch));
        }

        /**
         * @param autostart Set to `true` to start the domain on host boot up.
         * If not specified `false` is assumed.
         * 
         * @return builder
         * 
         */
        public Builder autostart(@Nullable Output<Boolean> autostart) {
            $.autostart = autostart;
            return this;
        }

        /**
         * @param autostart Set to `true` to start the domain on host boot up.
         * If not specified `false` is assumed.
         * 
         * @return builder
         * 
         */
        public Builder autostart(Boolean autostart) {
            return autostart(Output.of(autostart));
        }

        /**
         * @param bootDevices A list of devices (dev) which defines boot order. Example
         * below.
         * 
         * @return builder
         * 
         */
        public Builder bootDevices(@Nullable Output<List<DomainBootDeviceArgs>> bootDevices) {
            $.bootDevices = bootDevices;
            return this;
        }

        /**
         * @param bootDevices A list of devices (dev) which defines boot order. Example
         * below.
         * 
         * @return builder
         * 
         */
        public Builder bootDevices(List<DomainBootDeviceArgs> bootDevices) {
            return bootDevices(Output.of(bootDevices));
        }

        /**
         * @param bootDevices A list of devices (dev) which defines boot order. Example
         * below.
         * 
         * @return builder
         * 
         */
        public Builder bootDevices(DomainBootDeviceArgs... bootDevices) {
            return bootDevices(List.of(bootDevices));
        }

        /**
         * @param cloudinit The `libvirt.CloudInitDisk` disk that has to be used by
         * the domain. This is going to be attached as a CDROM ISO. Changing the
         * cloud-init won&#39;t cause the domain to be recreated, however the change will
         * have effect on the next reboot.
         * 
         * @return builder
         * 
         */
        public Builder cloudinit(@Nullable Output<String> cloudinit) {
            $.cloudinit = cloudinit;
            return this;
        }

        /**
         * @param cloudinit The `libvirt.CloudInitDisk` disk that has to be used by
         * the domain. This is going to be attached as a CDROM ISO. Changing the
         * cloud-init won&#39;t cause the domain to be recreated, however the change will
         * have effect on the next reboot.
         * 
         * @return builder
         * 
         */
        public Builder cloudinit(String cloudinit) {
            return cloudinit(Output.of(cloudinit));
        }

        /**
         * @param cmdlines Arguments to the kernel
         * 
         * @return builder
         * 
         */
        public Builder cmdlines(@Nullable Output<List<Map<String,Object>>> cmdlines) {
            $.cmdlines = cmdlines;
            return this;
        }

        /**
         * @param cmdlines Arguments to the kernel
         * 
         * @return builder
         * 
         */
        public Builder cmdlines(List<Map<String,Object>> cmdlines) {
            return cmdlines(Output.of(cmdlines));
        }

        /**
         * @param cmdlines Arguments to the kernel
         * 
         * @return builder
         * 
         */
        public Builder cmdlines(Map<String,Object>... cmdlines) {
            return cmdlines(List.of(cmdlines));
        }

        public Builder consoles(@Nullable Output<List<DomainConsoleArgs>> consoles) {
            $.consoles = consoles;
            return this;
        }

        public Builder consoles(List<DomainConsoleArgs> consoles) {
            return consoles(Output.of(consoles));
        }

        public Builder consoles(DomainConsoleArgs... consoles) {
            return consoles(List.of(consoles));
        }

        /**
         * @param coreosIgnition The
         * [libvirt.Ignition](https://www.terraform.io/docs/providers/libvirt/r/coreos_ignition.html) resource
         * that is to be used by the CoreOS domain.
         * 
         * @return builder
         * 
         */
        public Builder coreosIgnition(@Nullable Output<String> coreosIgnition) {
            $.coreosIgnition = coreosIgnition;
            return this;
        }

        /**
         * @param coreosIgnition The
         * [libvirt.Ignition](https://www.terraform.io/docs/providers/libvirt/r/coreos_ignition.html) resource
         * that is to be used by the CoreOS domain.
         * 
         * @return builder
         * 
         */
        public Builder coreosIgnition(String coreosIgnition) {
            return coreosIgnition(Output.of(coreosIgnition));
        }

        /**
         * @param cpu Configures CPU mode. See below for more
         * details.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<DomainCpuArgs> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu Configures CPU mode. See below for more
         * details.
         * 
         * @return builder
         * 
         */
        public Builder cpu(DomainCpuArgs cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param description The description for domain.
         * Changing this forces a new resource to be created.
         * This data is not used by libvirt in any way, it can contain any information the user wants.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description for domain.
         * Changing this forces a new resource to be created.
         * This data is not used by libvirt in any way, it can contain any information the user wants.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disks An array of one or more disks to attach to the domain. The
         * `disk` object structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder disks(@Nullable Output<List<DomainDiskArgs>> disks) {
            $.disks = disks;
            return this;
        }

        /**
         * @param disks An array of one or more disks to attach to the domain. The
         * `disk` object structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder disks(List<DomainDiskArgs> disks) {
            return disks(Output.of(disks));
        }

        /**
         * @param disks An array of one or more disks to attach to the domain. The
         * `disk` object structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder disks(DomainDiskArgs... disks) {
            return disks(List.of(disks));
        }

        /**
         * @param emulator The path of the emulator to use
         * 
         * @return builder
         * 
         */
        public Builder emulator(@Nullable Output<String> emulator) {
            $.emulator = emulator;
            return this;
        }

        /**
         * @param emulator The path of the emulator to use
         * 
         * @return builder
         * 
         */
        public Builder emulator(String emulator) {
            return emulator(Output.of(emulator));
        }

        /**
         * @param filesystems An array of one or more host filesystems to attach to
         * the domain. The `filesystem` object structure is documented
         * below.
         * 
         * @return builder
         * 
         */
        public Builder filesystems(@Nullable Output<List<DomainFilesystemArgs>> filesystems) {
            $.filesystems = filesystems;
            return this;
        }

        /**
         * @param filesystems An array of one or more host filesystems to attach to
         * the domain. The `filesystem` object structure is documented
         * below.
         * 
         * @return builder
         * 
         */
        public Builder filesystems(List<DomainFilesystemArgs> filesystems) {
            return filesystems(Output.of(filesystems));
        }

        /**
         * @param filesystems An array of one or more host filesystems to attach to
         * the domain. The `filesystem` object structure is documented
         * below.
         * 
         * @return builder
         * 
         */
        public Builder filesystems(DomainFilesystemArgs... filesystems) {
            return filesystems(List.of(filesystems));
        }

        /**
         * @param firmware The UEFI rom images for exercising UEFI secure boot in a qemu
         * environment. Users should usually specify one of the standard _Open Virtual Machine
         * Firmware_ (_OVMF_) images available for their distributions. The file will be opened
         * read-only.
         * 
         * @return builder
         * 
         */
        public Builder firmware(@Nullable Output<String> firmware) {
            $.firmware = firmware;
            return this;
        }

        /**
         * @param firmware The UEFI rom images for exercising UEFI secure boot in a qemu
         * environment. Users should usually specify one of the standard _Open Virtual Machine
         * Firmware_ (_OVMF_) images available for their distributions. The file will be opened
         * read-only.
         * 
         * @return builder
         * 
         */
        public Builder firmware(String firmware) {
            return firmware(Output.of(firmware));
        }

        /**
         * @param fwCfgName The name of the firmware config path where ignition file is stored: default is `opt/com.coreos/config`. If you are using [Flatcar Linux](https://docs.flatcar-linux.org/os/booting-with-libvirt/#creating-the-domain-xml), the value is `opt/org.flatcar-linux/config`.
         * 
         * @return builder
         * 
         */
        public Builder fwCfgName(@Nullable Output<String> fwCfgName) {
            $.fwCfgName = fwCfgName;
            return this;
        }

        /**
         * @param fwCfgName The name of the firmware config path where ignition file is stored: default is `opt/com.coreos/config`. If you are using [Flatcar Linux](https://docs.flatcar-linux.org/os/booting-with-libvirt/#creating-the-domain-xml), the value is `opt/org.flatcar-linux/config`.
         * 
         * @return builder
         * 
         */
        public Builder fwCfgName(String fwCfgName) {
            return fwCfgName(Output.of(fwCfgName));
        }

        public Builder graphics(@Nullable Output<DomainGraphicsArgs> graphics) {
            $.graphics = graphics;
            return this;
        }

        public Builder graphics(DomainGraphicsArgs graphics) {
            return graphics(Output.of(graphics));
        }

        /**
         * @param initrd The path of the initrd to boot.
         * 
         * @return builder
         * 
         */
        public Builder initrd(@Nullable Output<String> initrd) {
            $.initrd = initrd;
            return this;
        }

        /**
         * @param initrd The path of the initrd to boot.
         * 
         * @return builder
         * 
         */
        public Builder initrd(String initrd) {
            return initrd(Output.of(initrd));
        }

        /**
         * @param kernel The path of the kernel to boot
         * 
         * @return builder
         * 
         */
        public Builder kernel(@Nullable Output<String> kernel) {
            $.kernel = kernel;
            return this;
        }

        /**
         * @param kernel The path of the kernel to boot
         * 
         * @return builder
         * 
         */
        public Builder kernel(String kernel) {
            return kernel(Output.of(kernel));
        }

        /**
         * @param machine The machine type,
         * you normally won&#39;t need to set this unless you are running on a platform that
         * defaults to the wrong machine type for your template
         * 
         * @return builder
         * 
         */
        public Builder machine(@Nullable Output<String> machine) {
            $.machine = machine;
            return this;
        }

        /**
         * @param machine The machine type,
         * you normally won&#39;t need to set this unless you are running on a platform that
         * defaults to the wrong machine type for your template
         * 
         * @return builder
         * 
         */
        public Builder machine(String machine) {
            return machine(Output.of(machine));
        }

        /**
         * @param memory The amount of memory in MiB. If not specified the domain
         * will be created with 512 MiB of memory be used.
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<Integer> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The amount of memory in MiB. If not specified the domain
         * will be created with 512 MiB of memory be used.
         * 
         * @return builder
         * 
         */
        public Builder memory(Integer memory) {
            return memory(Output.of(memory));
        }

        public Builder metadata(@Nullable Output<String> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(String metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param name A unique name for the resource, required by libvirt.
         * Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name for the resource, required by libvirt.
         * Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkInterfaces An array of one or more network interfaces to
         * attach to the domain. The `network_interface` object structure is documented
         * below.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(@Nullable Output<List<DomainNetworkInterfaceArgs>> networkInterfaces) {
            $.networkInterfaces = networkInterfaces;
            return this;
        }

        /**
         * @param networkInterfaces An array of one or more network interfaces to
         * attach to the domain. The `network_interface` object structure is documented
         * below.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(List<DomainNetworkInterfaceArgs> networkInterfaces) {
            return networkInterfaces(Output.of(networkInterfaces));
        }

        /**
         * @param networkInterfaces An array of one or more network interfaces to
         * attach to the domain. The `network_interface` object structure is documented
         * below.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(DomainNetworkInterfaceArgs... networkInterfaces) {
            return networkInterfaces(List.of(networkInterfaces));
        }

        /**
         * @param nvram this block allows specifying the following attributes related to the _nvram_:
         * 
         * @return builder
         * 
         */
        public Builder nvram(@Nullable Output<DomainNvramArgs> nvram) {
            $.nvram = nvram;
            return this;
        }

        /**
         * @param nvram this block allows specifying the following attributes related to the _nvram_:
         * 
         * @return builder
         * 
         */
        public Builder nvram(DomainNvramArgs nvram) {
            return nvram(Output.of(nvram));
        }

        /**
         * @param qemuAgent By default is disabled, set to true for enabling it. More info [qemu-agent](https://wiki.libvirt.org/page/Qemu_guest_agent).
         * 
         * @return builder
         * 
         */
        public Builder qemuAgent(@Nullable Output<Boolean> qemuAgent) {
            $.qemuAgent = qemuAgent;
            return this;
        }

        /**
         * @param qemuAgent By default is disabled, set to true for enabling it. More info [qemu-agent](https://wiki.libvirt.org/page/Qemu_guest_agent).
         * 
         * @return builder
         * 
         */
        public Builder qemuAgent(Boolean qemuAgent) {
            return qemuAgent(Output.of(qemuAgent));
        }

        /**
         * @param running Use `false` to turn off the instance. If not specified,
         * true is assumed and the instance, if stopped, will be started at next apply.
         * 
         * @return builder
         * 
         */
        public Builder running(@Nullable Output<Boolean> running) {
            $.running = running;
            return this;
        }

        /**
         * @param running Use `false` to turn off the instance. If not specified,
         * true is assumed and the instance, if stopped, will be started at next apply.
         * 
         * @return builder
         * 
         */
        public Builder running(Boolean running) {
            return running(Output.of(running));
        }

        /**
         * @param tpm TPM device to attach to the domain. The `tpm` object structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder tpm(@Nullable Output<DomainTpmArgs> tpm) {
            $.tpm = tpm;
            return this;
        }

        /**
         * @param tpm TPM device to attach to the domain. The `tpm` object structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder tpm(DomainTpmArgs tpm) {
            return tpm(Output.of(tpm));
        }

        /**
         * @param vcpu The amount of virtual CPUs. If not specified, a single CPU
         * will be created.
         * 
         * @return builder
         * 
         */
        public Builder vcpu(@Nullable Output<Integer> vcpu) {
            $.vcpu = vcpu;
            return this;
        }

        /**
         * @param vcpu The amount of virtual CPUs. If not specified, a single CPU
         * will be created.
         * 
         * @return builder
         * 
         */
        public Builder vcpu(Integer vcpu) {
            return vcpu(Output.of(vcpu));
        }

        public Builder video(@Nullable Output<DomainVideoArgs> video) {
            $.video = video;
            return this;
        }

        public Builder video(DomainVideoArgs video) {
            return video(Output.of(video));
        }

        public Builder xml(@Nullable Output<DomainXmlArgs> xml) {
            $.xml = xml;
            return this;
        }

        public Builder xml(DomainXmlArgs xml) {
            return xml(Output.of(xml));
        }

        public DomainState build() {
            return $;
        }
    }

}
