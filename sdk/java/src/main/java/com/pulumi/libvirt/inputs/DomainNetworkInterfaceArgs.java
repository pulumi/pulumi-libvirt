// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.libvirt.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainNetworkInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainNetworkInterfaceArgs Empty = new DomainNetworkInterfaceArgs();

    @Import(name="addresses")
    private @Nullable Output<List<String>> addresses;

    public Optional<Output<List<String>>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    @Import(name="bridge")
    private @Nullable Output<String> bridge;

    public Optional<Output<String>> bridge() {
        return Optional.ofNullable(this.bridge);
    }

    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    @Import(name="mac")
    private @Nullable Output<String> mac;

    public Optional<Output<String>> mac() {
        return Optional.ofNullable(this.mac);
    }

    @Import(name="macvtap")
    private @Nullable Output<String> macvtap;

    public Optional<Output<String>> macvtap() {
        return Optional.ofNullable(this.macvtap);
    }

    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    @Import(name="networkName")
    private @Nullable Output<String> networkName;

    public Optional<Output<String>> networkName() {
        return Optional.ofNullable(this.networkName);
    }

    @Import(name="passthrough")
    private @Nullable Output<String> passthrough;

    public Optional<Output<String>> passthrough() {
        return Optional.ofNullable(this.passthrough);
    }

    @Import(name="vepa")
    private @Nullable Output<String> vepa;

    public Optional<Output<String>> vepa() {
        return Optional.ofNullable(this.vepa);
    }

    @Import(name="waitForLease")
    private @Nullable Output<Boolean> waitForLease;

    public Optional<Output<Boolean>> waitForLease() {
        return Optional.ofNullable(this.waitForLease);
    }

    private DomainNetworkInterfaceArgs() {}

    private DomainNetworkInterfaceArgs(DomainNetworkInterfaceArgs $) {
        this.addresses = $.addresses;
        this.bridge = $.bridge;
        this.hostname = $.hostname;
        this.mac = $.mac;
        this.macvtap = $.macvtap;
        this.networkId = $.networkId;
        this.networkName = $.networkName;
        this.passthrough = $.passthrough;
        this.vepa = $.vepa;
        this.waitForLease = $.waitForLease;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainNetworkInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainNetworkInterfaceArgs $;

        public Builder() {
            $ = new DomainNetworkInterfaceArgs();
        }

        public Builder(DomainNetworkInterfaceArgs defaults) {
            $ = new DomainNetworkInterfaceArgs(Objects.requireNonNull(defaults));
        }

        public Builder addresses(@Nullable Output<List<String>> addresses) {
            $.addresses = addresses;
            return this;
        }

        public Builder addresses(List<String> addresses) {
            return addresses(Output.of(addresses));
        }

        public Builder addresses(String... addresses) {
            return addresses(List.of(addresses));
        }

        public Builder bridge(@Nullable Output<String> bridge) {
            $.bridge = bridge;
            return this;
        }

        public Builder bridge(String bridge) {
            return bridge(Output.of(bridge));
        }

        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        public Builder mac(@Nullable Output<String> mac) {
            $.mac = mac;
            return this;
        }

        public Builder mac(String mac) {
            return mac(Output.of(mac));
        }

        public Builder macvtap(@Nullable Output<String> macvtap) {
            $.macvtap = macvtap;
            return this;
        }

        public Builder macvtap(String macvtap) {
            return macvtap(Output.of(macvtap));
        }

        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        public Builder networkName(@Nullable Output<String> networkName) {
            $.networkName = networkName;
            return this;
        }

        public Builder networkName(String networkName) {
            return networkName(Output.of(networkName));
        }

        public Builder passthrough(@Nullable Output<String> passthrough) {
            $.passthrough = passthrough;
            return this;
        }

        public Builder passthrough(String passthrough) {
            return passthrough(Output.of(passthrough));
        }

        public Builder vepa(@Nullable Output<String> vepa) {
            $.vepa = vepa;
            return this;
        }

        public Builder vepa(String vepa) {
            return vepa(Output.of(vepa));
        }

        public Builder waitForLease(@Nullable Output<Boolean> waitForLease) {
            $.waitForLease = waitForLease;
            return this;
        }

        public Builder waitForLease(Boolean waitForLease) {
            return waitForLease(Output.of(waitForLease));
        }

        public DomainNetworkInterfaceArgs build() {
            return $;
        }
    }

}
