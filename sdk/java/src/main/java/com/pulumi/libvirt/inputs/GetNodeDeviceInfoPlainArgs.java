// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.libvirt.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.libvirt.inputs.GetNodeDeviceInfoCapability;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNodeDeviceInfoPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNodeDeviceInfoPlainArgs Empty = new GetNodeDeviceInfoPlainArgs();

    /**
     * Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
     * 
     */
    @Import(name="capability")
    private @Nullable GetNodeDeviceInfoCapability capability;

    /**
     * @return Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
     * 
     */
    public Optional<GetNodeDeviceInfoCapability> capability() {
        return Optional.ofNullable(this.capability);
    }

    /**
     * The name of the device name as expected by [libvirt](https://www.libvirt.org/manpages/virsh.html#nodedev-commands).
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the device name as expected by [libvirt](https://www.libvirt.org/manpages/virsh.html#nodedev-commands).
     * 
     */
    public String name() {
        return this.name;
    }

    private GetNodeDeviceInfoPlainArgs() {}

    private GetNodeDeviceInfoPlainArgs(GetNodeDeviceInfoPlainArgs $) {
        this.capability = $.capability;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodeDeviceInfoPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodeDeviceInfoPlainArgs $;

        public Builder() {
            $ = new GetNodeDeviceInfoPlainArgs();
        }

        public Builder(GetNodeDeviceInfoPlainArgs defaults) {
            $ = new GetNodeDeviceInfoPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capability Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
         * 
         * @return builder
         * 
         */
        public Builder capability(@Nullable GetNodeDeviceInfoCapability capability) {
            $.capability = capability;
            return this;
        }

        /**
         * @param name The name of the device name as expected by [libvirt](https://www.libvirt.org/manpages/virsh.html#nodedev-commands).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public GetNodeDeviceInfoPlainArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetNodeDeviceInfoPlainArgs", "name");
            }
            return $;
        }
    }

}
