// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a VM network resource within libvirt. For more information see
 * [the official documentation](https://libvirt.org/formatnetwork.html).
 */
export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'libvirt:index/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    /**
     * A list of (0 or 1) IPv4 and (0 or 1) IPv6 subnets in
     * CIDR notation.  This defines the subnets associated to that network.
     * This argument is also used to define the address on the real host.
     * If `dhcp {  enabled = true }` addresses is also used to define the address range served by
     * the DHCP server.
     * No DHCP server will be started if `addresses` is omitted.
     */
    public readonly addresses!: pulumi.Output<string[] | undefined>;
    /**
     * Set to `true` to start the network on host boot up.
     * If not specified `false` is assumed.
     */
    public readonly autostart!: pulumi.Output<boolean>;
    /**
     * The bridge device defines the name of a bridge
     * device which will be used to construct the virtual network (when not provided,
     * it will be automatically obtained by libvirt in `none`, `nat`, `route` and `open` modes).
     */
    public readonly bridge!: pulumi.Output<string>;
    /**
     * DHCP configuration. 
     * You need to use it in conjuction with the adresses variable.
     */
    public readonly dhcp!: pulumi.Output<outputs.NetworkDhcp>;
    /**
     * configuration of DNS specific settings for the network
     */
    public readonly dns!: pulumi.Output<outputs.NetworkDns>;
    /**
     * configuration of Dnsmasq options for the network
     * You need to provide a list of option name and value pairs.
     */
    public readonly dnsmasqOptions!: pulumi.Output<outputs.NetworkDnsmasqOptions | undefined>;
    /**
     * The domain used by the DNS server.
     */
    public readonly domain!: pulumi.Output<string | undefined>;
    /**
     * One of:
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The MTU to set for the underlying network interfaces. When
     * not supplied, libvirt will use the default for the interface, usually 1500.
     * Libvirt version 5.1 and greater will advertise this value to nodes via DHCP.
     */
    public readonly mtu!: pulumi.Output<number | undefined>;
    /**
     * A unique name for the resource, required by libvirt.
     * Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * a list of static routes. A `cidr` and a `gateway` must
     * be provided. The `gateway` must be reachable via the bridge interface.
     */
    public readonly routes!: pulumi.Output<outputs.NetworkRoute[] | undefined>;
    public readonly xml!: pulumi.Output<outputs.NetworkXml | undefined>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            resourceInputs["addresses"] = state ? state.addresses : undefined;
            resourceInputs["autostart"] = state ? state.autostart : undefined;
            resourceInputs["bridge"] = state ? state.bridge : undefined;
            resourceInputs["dhcp"] = state ? state.dhcp : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["dnsmasqOptions"] = state ? state.dnsmasqOptions : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
            resourceInputs["xml"] = state ? state.xml : undefined;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            resourceInputs["addresses"] = args ? args.addresses : undefined;
            resourceInputs["autostart"] = args ? args.autostart : undefined;
            resourceInputs["bridge"] = args ? args.bridge : undefined;
            resourceInputs["dhcp"] = args ? args.dhcp : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["dnsmasqOptions"] = args ? args.dnsmasqOptions : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["routes"] = args ? args.routes : undefined;
            resourceInputs["xml"] = args ? args.xml : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    /**
     * A list of (0 or 1) IPv4 and (0 or 1) IPv6 subnets in
     * CIDR notation.  This defines the subnets associated to that network.
     * This argument is also used to define the address on the real host.
     * If `dhcp {  enabled = true }` addresses is also used to define the address range served by
     * the DHCP server.
     * No DHCP server will be started if `addresses` is omitted.
     */
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set to `true` to start the network on host boot up.
     * If not specified `false` is assumed.
     */
    autostart?: pulumi.Input<boolean>;
    /**
     * The bridge device defines the name of a bridge
     * device which will be used to construct the virtual network (when not provided,
     * it will be automatically obtained by libvirt in `none`, `nat`, `route` and `open` modes).
     */
    bridge?: pulumi.Input<string>;
    /**
     * DHCP configuration. 
     * You need to use it in conjuction with the adresses variable.
     */
    dhcp?: pulumi.Input<inputs.NetworkDhcp>;
    /**
     * configuration of DNS specific settings for the network
     */
    dns?: pulumi.Input<inputs.NetworkDns>;
    /**
     * configuration of Dnsmasq options for the network
     * You need to provide a list of option name and value pairs.
     */
    dnsmasqOptions?: pulumi.Input<inputs.NetworkDnsmasqOptions>;
    /**
     * The domain used by the DNS server.
     */
    domain?: pulumi.Input<string>;
    /**
     * One of:
     */
    mode?: pulumi.Input<string>;
    /**
     * The MTU to set for the underlying network interfaces. When
     * not supplied, libvirt will use the default for the interface, usually 1500.
     * Libvirt version 5.1 and greater will advertise this value to nodes via DHCP.
     */
    mtu?: pulumi.Input<number>;
    /**
     * A unique name for the resource, required by libvirt.
     * Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * a list of static routes. A `cidr` and a `gateway` must
     * be provided. The `gateway` must be reachable via the bridge interface.
     */
    routes?: pulumi.Input<pulumi.Input<inputs.NetworkRoute>[]>;
    xml?: pulumi.Input<inputs.NetworkXml>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    /**
     * A list of (0 or 1) IPv4 and (0 or 1) IPv6 subnets in
     * CIDR notation.  This defines the subnets associated to that network.
     * This argument is also used to define the address on the real host.
     * If `dhcp {  enabled = true }` addresses is also used to define the address range served by
     * the DHCP server.
     * No DHCP server will be started if `addresses` is omitted.
     */
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set to `true` to start the network on host boot up.
     * If not specified `false` is assumed.
     */
    autostart?: pulumi.Input<boolean>;
    /**
     * The bridge device defines the name of a bridge
     * device which will be used to construct the virtual network (when not provided,
     * it will be automatically obtained by libvirt in `none`, `nat`, `route` and `open` modes).
     */
    bridge?: pulumi.Input<string>;
    /**
     * DHCP configuration. 
     * You need to use it in conjuction with the adresses variable.
     */
    dhcp?: pulumi.Input<inputs.NetworkDhcp>;
    /**
     * configuration of DNS specific settings for the network
     */
    dns?: pulumi.Input<inputs.NetworkDns>;
    /**
     * configuration of Dnsmasq options for the network
     * You need to provide a list of option name and value pairs.
     */
    dnsmasqOptions?: pulumi.Input<inputs.NetworkDnsmasqOptions>;
    /**
     * The domain used by the DNS server.
     */
    domain?: pulumi.Input<string>;
    /**
     * One of:
     */
    mode?: pulumi.Input<string>;
    /**
     * The MTU to set for the underlying network interfaces. When
     * not supplied, libvirt will use the default for the interface, usually 1500.
     * Libvirt version 5.1 and greater will advertise this value to nodes via DHCP.
     */
    mtu?: pulumi.Input<number>;
    /**
     * A unique name for the resource, required by libvirt.
     * Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * a list of static routes. A `cidr` and a `gateway` must
     * be provided. The `gateway` must be reachable via the bridge interface.
     */
    routes?: pulumi.Input<pulumi.Input<inputs.NetworkRoute>[]>;
    xml?: pulumi.Input<inputs.NetworkXml>;
}
