// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DomainBootDevice {
    devs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DomainConsole {
    /**
     * IP address to listen on. Defaults to 127.0.0.1.
     */
    sourceHost?: pulumi.Input<string>;
    /**
     * Source path
     *
     * Additional attributes when type is "tcp":
     */
    sourcePath?: pulumi.Input<string>;
    /**
     * Port number or a service name. Defaults to a
     * random port.
     *
     * Note that you can repeat the `console` block to create more than one console.
     * This works the same way as with the `disk` blocks (see above).
     *
     * See [libvirt Domain XML Console element](https://libvirt.org/formatdomain.html#elementsConsole)
     * for more information.
     */
    sourceService?: pulumi.Input<string>;
    /**
     * Target port
     */
    targetPort: pulumi.Input<string>;
    /**
     * for the first console and defaults to `serial`.
     * Subsequent `console` blocks must have a different type - usually `virtio`.
     *
     * Additional attributes when type is "pty":
     */
    targetType?: pulumi.Input<string>;
    /**
     * Console device type. Valid values are "pty" and "tcp".
     */
    type: pulumi.Input<string>;
}

export interface DomainCpu {
    mode?: pulumi.Input<string>;
}

export interface DomainDisk {
    /**
     * The path to the host device to use as the block device for this disk. 
     *
     * While `volumeId`, `url`, `file` and `blockDevice` are optional, it is intended that you use one of them.
     */
    blockDevice?: pulumi.Input<string>;
    /**
     * The filename to use as the block device for this disk (read-only)
     */
    file?: pulumi.Input<string>;
    /**
     * Use a scsi controller for this disk.  The controller
     * model is set to `virtio-scsi`
     */
    scsi?: pulumi.Input<boolean>;
    /**
     * The http url to use as the block device for this disk (read-only)
     */
    url?: pulumi.Input<string>;
    /**
     * The volume id to use for this disk.
     */
    volumeId?: pulumi.Input<string>;
    /**
     * Specify a WWN to use for the disk if the disk is using
     * a scsi controller, if not specified then a random wwn is generated for the disk
     *
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as libvirt from "@pulumi/libvirt";
     *
     * const leap = new libvirt.Volume("leap", {
     *     name: "leap",
     *     source: "http://someurl/openSUSE_Leap-42.1.qcow2",
     * });
     * const mydisk = new libvirt.Volume("mydisk", {
     *     name: "mydisk",
     *     baseVolumeId: leap.id,
     * });
     * const domain1 = new libvirt.Domain("domain1", {
     *     name: "domain1",
     *     disks: [
     *         {
     *             volumeId: mydisk.id,
     *             scsi: true,
     *         },
     *         {
     *             url: "http://foo.com/install.iso",
     *         },
     *         {
     *             file: "/absolute/path/to/disk.iso",
     *         },
     *         {
     *             blockDevice: "/dev/mapper/36005076802810e55400000000000145f",
     *         },
     *     ],
     * });
     * ```
     *
     * Also note that the `disk` block is actually a list of maps, so it is possible to
     * declare several of them by using either the literal list and map syntax as in
     * the following examples:
     */
    wwn?: pulumi.Input<string>;
}

export interface DomainFilesystem {
    accessmode?: pulumi.Input<string>;
    readonly?: pulumi.Input<boolean>;
    source: pulumi.Input<string>;
    target: pulumi.Input<string>;
}

export interface DomainGraphics {
    /**
     * defaults to "yes"
     */
    autoport?: pulumi.Input<boolean>;
    /**
     * IP Address where the VNC listener should be started if
     * `listenType` is set to `address`. Defaults to 127.0.0.1
     */
    listenAddress?: pulumi.Input<string>;
    /**
     * "listen type", defaults to "none"
     */
    listenType?: pulumi.Input<string>;
    /**
     * the type of graphics emulation (default is "spice")
     */
    type?: pulumi.Input<string>;
    /**
     * Port to listen on for VNC WebSocket functionality (-1 meaning auto-allocation)
     *
     * On occasion we have found it necessary to set a `type` of `vnc` and a
     * `listenType` of `address` with certain builds of QEMU.
     *
     * With `listenAddress` it is possible to specify a listener address for the virtual
     * machines VNC server. Usually this is an IP of the host system.
     *
     * The `graphics` block will look as follows:
     */
    websocket?: pulumi.Input<number>;
}

export interface DomainNetworkInterface {
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    bridge?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    macvtap?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    networkName?: pulumi.Input<string>;
    passthrough?: pulumi.Input<string>;
    vepa?: pulumi.Input<string>;
    waitForLease?: pulumi.Input<boolean>;
}

export interface DomainNvram {
    file: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}

export interface DomainTpm {
    /**
     * Path to TPM device on the host, ex: `/dev/tpm0`
     *
     * Additional attributes when `backendType` is "emulator":
     */
    backendDevicePath?: pulumi.Input<string>;
    /**
     * [Secret object](https://libvirt.org/formatsecret.html) for encrypting the TPM state
     */
    backendEncryptionSecret?: pulumi.Input<string>;
    /**
     * Keep the TPM state when a transient domain is powered off or undefined
     */
    backendPersistentState?: pulumi.Input<boolean>;
    /**
     * TPM backend, either `passthrough` or `emulator` (default: `emulator`)
     *
     * Additional attributes when `backendType` is "passthrough":
     */
    backendType?: pulumi.Input<string>;
    /**
     * TPM version
     */
    backendVersion?: pulumi.Input<string>;
    /**
     * TPM model provided to the guest
     */
    model?: pulumi.Input<string>;
}

export interface DomainVideo {
    /**
     * The type of hypervisor to use for the domain.  Defaults to `kvm`, other values can be found [here](https://libvirt.org/formatdomain.html#id1)
     */
    type?: pulumi.Input<string>;
}

export interface DomainXml {
    xslt?: pulumi.Input<string>;
}

export interface NetworkDhcp {
    enabled?: pulumi.Input<boolean>;
}

export interface NetworkDns {
    enabled?: pulumi.Input<boolean>;
    /**
     * Either `address`, `domain`, or both must be set
     */
    forwarders?: pulumi.Input<pulumi.Input<inputs.NetworkDnsForwarder>[]>;
    /**
     * a DNS host entry block. You can have one or more of these
     * blocks in your DNS definition. You must specify both `ip` and `hostname`.
     *
     * An advanced example of round-robin DNS (using DNS host templates) follows:
     */
    hosts?: pulumi.Input<pulumi.Input<inputs.NetworkDnsHost>[]>;
    /**
     * true/false: true means 'do not forward unresolved requests for this domain to the part DNS server
     */
    localOnly?: pulumi.Input<boolean>;
    /**
     * a DNS SRV entry block. You can have one or more of these blocks
     * in your DNS definition. You must specify `service` and `protocol`.
     */
    srvs?: pulumi.Input<pulumi.Input<inputs.NetworkDnsSrv>[]>;
}

export interface NetworkDnsForwarder {
    address?: pulumi.Input<string>;
    /**
     * The domain used by the DNS server.
     */
    domain?: pulumi.Input<string>;
}

export interface NetworkDnsHost {
    hostname?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
}

export interface NetworkDnsSrv {
    /**
     * The domain used by the DNS server.
     */
    domain?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    weight?: pulumi.Input<string>;
}

export interface NetworkDnsmasqOptions {
    options?: pulumi.Input<pulumi.Input<inputs.NetworkDnsmasqOptionsOption>[]>;
}

export interface NetworkDnsmasqOptionsOption {
    optionName?: pulumi.Input<string>;
    optionValue?: pulumi.Input<string>;
}

export interface NetworkRoute {
    cidr: pulumi.Input<string>;
    gateway: pulumi.Input<string>;
}

export interface NetworkXml {
    xslt?: pulumi.Input<string>;
}

export interface PoolXml {
    xslt?: pulumi.Input<string>;
}

export interface VolumeXml {
    xslt?: pulumi.Input<string>;
}
