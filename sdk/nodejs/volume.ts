// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Manages a storage volume in libvirt. For more information see
 * [the official documentation](https://libvirt.org/formatstorage.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as libvirt from "@pulumi/libvirt";
 *
 * // Base OS image to use to create a cluster of different
 * // nodes
 * const opensuseLeap = new libvirt.Volume("opensuseLeap", {source: "http://download.opensuse.org/repositories/Cloud:/Images:/Leap_42.1/images/openSUSE-Leap-42.1-OpenStack.x86_64.qcow2"});
 * // volume to attach to the "master" domain as main disk
 * const master = new libvirt.Volume("master", {baseVolumeId: opensuseLeap.id});
 * // volumes to attach to the "workers" domains as main disk
 * const worker: libvirt.Volume[];
 * for (const range = {value: 0}; range.value < _var.workers_count; range.value++) {
 *     worker.push(new libvirt.Volume(`worker-${range.value}`, {baseVolumeId: opensuseLeap.id}));
 * }
 * ```
 *
 * > **Tip:** when provisioning multiple domains using the same base image, create
 * a `libvirt.Volume` for the base image and then define the domain specific ones
 * as based on it. This way the image will not be modified and no extra disk space
 * is going to be used for the base image.
 */
export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'libvirt:index/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * The backing volume (CoW) to use for this volume.
     */
    public readonly baseVolumeId!: pulumi.Output<string | undefined>;
    /**
     * The name of the backing volume (CoW) to use
     * for this volume. Note well: when `baseVolumePool` is not specified the
     * volume is going to be searched inside of `pool`.
     */
    public readonly baseVolumeName!: pulumi.Output<string | undefined>;
    /**
     * The name of the storage pool containing the
     * volume defined by `baseVolumeName`.
     */
    public readonly baseVolumePool!: pulumi.Output<string | undefined>;
    public readonly format!: pulumi.Output<string>;
    /**
     * A unique name for the resource, required by libvirt.
     * Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The storage pool where the resource will be created.
     * If not given, the `default` storage pool will be used.
     */
    public readonly pool!: pulumi.Output<string | undefined>;
    public readonly size!: pulumi.Output<number>;
    public readonly source!: pulumi.Output<string | undefined>;
    public readonly xml!: pulumi.Output<outputs.VolumeXml | undefined>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            inputs["baseVolumeId"] = state ? state.baseVolumeId : undefined;
            inputs["baseVolumeName"] = state ? state.baseVolumeName : undefined;
            inputs["baseVolumePool"] = state ? state.baseVolumePool : undefined;
            inputs["format"] = state ? state.format : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pool"] = state ? state.pool : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["source"] = state ? state.source : undefined;
            inputs["xml"] = state ? state.xml : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            inputs["baseVolumeId"] = args ? args.baseVolumeId : undefined;
            inputs["baseVolumeName"] = args ? args.baseVolumeName : undefined;
            inputs["baseVolumePool"] = args ? args.baseVolumePool : undefined;
            inputs["format"] = args ? args.format : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["pool"] = args ? args.pool : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["source"] = args ? args.source : undefined;
            inputs["xml"] = args ? args.xml : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Volume.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * The backing volume (CoW) to use for this volume.
     */
    baseVolumeId?: pulumi.Input<string>;
    /**
     * The name of the backing volume (CoW) to use
     * for this volume. Note well: when `baseVolumePool` is not specified the
     * volume is going to be searched inside of `pool`.
     */
    baseVolumeName?: pulumi.Input<string>;
    /**
     * The name of the storage pool containing the
     * volume defined by `baseVolumeName`.
     */
    baseVolumePool?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    /**
     * A unique name for the resource, required by libvirt.
     * Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The storage pool where the resource will be created.
     * If not given, the `default` storage pool will be used.
     */
    pool?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    source?: pulumi.Input<string>;
    xml?: pulumi.Input<inputs.VolumeXml>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * The backing volume (CoW) to use for this volume.
     */
    baseVolumeId?: pulumi.Input<string>;
    /**
     * The name of the backing volume (CoW) to use
     * for this volume. Note well: when `baseVolumePool` is not specified the
     * volume is going to be searched inside of `pool`.
     */
    baseVolumeName?: pulumi.Input<string>;
    /**
     * The name of the storage pool containing the
     * volume defined by `baseVolumeName`.
     */
    baseVolumePool?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    /**
     * A unique name for the resource, required by libvirt.
     * Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The storage pool where the resource will be created.
     * If not given, the `default` storage pool will be used.
     */
    pool?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    source?: pulumi.Input<string>;
    xml?: pulumi.Input<inputs.VolumeXml>;
}
