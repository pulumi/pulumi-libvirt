// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieve information about a specific device on the current node
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as libvirt from "@pulumi/libvirt";
 *
 * const device = libvirt.getNodeDeviceInfo({
 *     name: "pci_0000_00_00_0",
 * });
 * ```
 */
export function getNodeDeviceInfo(args: GetNodeDeviceInfoArgs, opts?: pulumi.InvokeOptions): Promise<GetNodeDeviceInfoResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("libvirt:index/getNodeDeviceInfo:getNodeDeviceInfo", {
        "capability": args.capability,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getNodeDeviceInfo.
 */
export interface GetNodeDeviceInfoArgs {
    /**
     * Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
     */
    capability?: inputs.GetNodeDeviceInfoCapability;
    /**
     * The name of the device name as expected by [libvirt](https://www.libvirt.org/manpages/virsh.html#nodedev-commands).
     */
    name: string;
}

/**
 * A collection of values returned by getNodeDeviceInfo.
 */
export interface GetNodeDeviceInfoResult {
    /**
     * Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
     */
    readonly capability: outputs.GetNodeDeviceInfoCapability;
    /**
     * For type `drm` holds the `path` and `link` that point to the device
     */
    readonly devnodes: outputs.GetNodeDeviceInfoDevnode[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    /**
     * The parent of this device in the hierarchy
     */
    readonly parent: string;
    /**
     * Full path of the device
     */
    readonly path: string;
    /**
     * The XML returned by the libvirt API call
     */
    readonly xml: string;
}
/**
 * Retrieve information about a specific device on the current node
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as libvirt from "@pulumi/libvirt";
 *
 * const device = libvirt.getNodeDeviceInfo({
 *     name: "pci_0000_00_00_0",
 * });
 * ```
 */
export function getNodeDeviceInfoOutput(args: GetNodeDeviceInfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNodeDeviceInfoResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("libvirt:index/getNodeDeviceInfo:getNodeDeviceInfo", {
        "capability": args.capability,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getNodeDeviceInfo.
 */
export interface GetNodeDeviceInfoOutputArgs {
    /**
     * Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
     */
    capability?: pulumi.Input<inputs.GetNodeDeviceInfoCapabilityArgs>;
    /**
     * The name of the device name as expected by [libvirt](https://www.libvirt.org/manpages/virsh.html#nodedev-commands).
     */
    name: pulumi.Input<string>;
}
