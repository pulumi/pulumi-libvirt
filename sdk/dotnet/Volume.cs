// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Libvirt
{
    /// <summary>
    /// Manages a storage volume in libvirt. For more information see
    /// [the official documentation](https://libvirt.org/formatstorage.html).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Libvirt = Pulumi.Libvirt;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Base OS image to use to create a cluster of different
    ///     // nodes
    ///     var opensuseLeap = new Libvirt.Volume("opensuseLeap", new()
    ///     {
    ///         Source = "http://download.opensuse.org/repositories/Cloud:/Images:/Leap_42.1/images/openSUSE-Leap-42.1-OpenStack.x86_64.qcow2",
    ///     });
    /// 
    ///     // volume to attach to the "master" domain as main disk
    ///     var master = new Libvirt.Volume("master", new()
    ///     {
    ///         BaseVolumeId = opensuseLeap.Id,
    ///     });
    /// 
    ///     // volumes to attach to the "workers" domains as main disk
    ///     var worker = new List&lt;Libvirt.Volume&gt;();
    ///     for (var rangeIndex = 0; rangeIndex &lt; @var.Workers_count; rangeIndex++)
    ///     {
    ///         var range = new { Value = rangeIndex };
    ///         worker.Add(new Libvirt.Volume($"worker-{range.Value}", new()
    ///         {
    ///             BaseVolumeId = opensuseLeap.Id,
    ///         }));
    ///     }
    /// });
    /// ```
    /// 
    /// &gt; **Tip:** when provisioning multiple domains using the same base image, create
    /// a `libvirt.Volume` for the base image and then define the domain specific ones
    /// as based on it. This way the image will not be modified and no extra disk space
    /// is going to be used for the base image.
    /// </summary>
    [LibvirtResourceType("libvirt:index/volume:Volume")]
    public partial class Volume : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The backing volume (CoW) to use for this volume.
        /// </summary>
        [Output("baseVolumeId")]
        public Output<string?> BaseVolumeId { get; private set; } = null!;

        /// <summary>
        /// The name of the backing volume (CoW) to use
        /// for this volume. Note well: when `base_volume_pool` is not specified the
        /// volume is going to be searched inside of `pool`.
        /// </summary>
        [Output("baseVolumeName")]
        public Output<string?> BaseVolumeName { get; private set; } = null!;

        /// <summary>
        /// The name of the storage pool containing the
        /// volume defined by `base_volume_name`.
        /// </summary>
        [Output("baseVolumePool")]
        public Output<string?> BaseVolumePool { get; private set; } = null!;

        [Output("format")]
        public Output<string> Format { get; private set; } = null!;

        /// <summary>
        /// A unique name for the resource, required by libvirt.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The storage pool where the resource will be created.
        /// If not given, the `default` storage pool will be used.
        /// </summary>
        [Output("pool")]
        public Output<string?> Pool { get; private set; } = null!;

        /// <summary>
        /// The size of the volume in bytes (if you don't like this,
        /// help fix this issue.
        /// If `source` is specified, `size` will be set to the source image file size.
        /// `size` can be omitted if `source` is specified. `size` will then be set to the source image file size.
        /// `size` can be omitted if `base_volume_id` or `base_volume_name` is specified. `size` will then be set to the base volume size.
        /// If `size` is specified to be bigger than `base_volume_id` or `base_volume_name` size, you can use [cloudinit](https://cloudinit.readthedocs.io) if your OS supports it, with `libvirt.CloudInitDisk` and the [growpart](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#growpart) module to resize the partition.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        [Output("source")]
        public Output<string?> Source { get; private set; } = null!;

        [Output("xml")]
        public Output<Outputs.VolumeXml?> Xml { get; private set; } = null!;


        /// <summary>
        /// Create a Volume resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Volume(string name, VolumeArgs? args = null, CustomResourceOptions? options = null)
            : base("libvirt:index/volume:Volume", name, args ?? new VolumeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Volume(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
            : base("libvirt:index/volume:Volume", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Volume resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Volume Get(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
        {
            return new Volume(name, id, state, options);
        }
    }

    public sealed class VolumeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The backing volume (CoW) to use for this volume.
        /// </summary>
        [Input("baseVolumeId")]
        public Input<string>? BaseVolumeId { get; set; }

        /// <summary>
        /// The name of the backing volume (CoW) to use
        /// for this volume. Note well: when `base_volume_pool` is not specified the
        /// volume is going to be searched inside of `pool`.
        /// </summary>
        [Input("baseVolumeName")]
        public Input<string>? BaseVolumeName { get; set; }

        /// <summary>
        /// The name of the storage pool containing the
        /// volume defined by `base_volume_name`.
        /// </summary>
        [Input("baseVolumePool")]
        public Input<string>? BaseVolumePool { get; set; }

        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// A unique name for the resource, required by libvirt.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The storage pool where the resource will be created.
        /// If not given, the `default` storage pool will be used.
        /// </summary>
        [Input("pool")]
        public Input<string>? Pool { get; set; }

        /// <summary>
        /// The size of the volume in bytes (if you don't like this,
        /// help fix this issue.
        /// If `source` is specified, `size` will be set to the source image file size.
        /// `size` can be omitted if `source` is specified. `size` will then be set to the source image file size.
        /// `size` can be omitted if `base_volume_id` or `base_volume_name` is specified. `size` will then be set to the base volume size.
        /// If `size` is specified to be bigger than `base_volume_id` or `base_volume_name` size, you can use [cloudinit](https://cloudinit.readthedocs.io) if your OS supports it, with `libvirt.CloudInitDisk` and the [growpart](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#growpart) module to resize the partition.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        [Input("source")]
        public Input<string>? Source { get; set; }

        [Input("xml")]
        public Input<Inputs.VolumeXmlArgs>? Xml { get; set; }

        public VolumeArgs()
        {
        }
        public static new VolumeArgs Empty => new VolumeArgs();
    }

    public sealed class VolumeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The backing volume (CoW) to use for this volume.
        /// </summary>
        [Input("baseVolumeId")]
        public Input<string>? BaseVolumeId { get; set; }

        /// <summary>
        /// The name of the backing volume (CoW) to use
        /// for this volume. Note well: when `base_volume_pool` is not specified the
        /// volume is going to be searched inside of `pool`.
        /// </summary>
        [Input("baseVolumeName")]
        public Input<string>? BaseVolumeName { get; set; }

        /// <summary>
        /// The name of the storage pool containing the
        /// volume defined by `base_volume_name`.
        /// </summary>
        [Input("baseVolumePool")]
        public Input<string>? BaseVolumePool { get; set; }

        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// A unique name for the resource, required by libvirt.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The storage pool where the resource will be created.
        /// If not given, the `default` storage pool will be used.
        /// </summary>
        [Input("pool")]
        public Input<string>? Pool { get; set; }

        /// <summary>
        /// The size of the volume in bytes (if you don't like this,
        /// help fix this issue.
        /// If `source` is specified, `size` will be set to the source image file size.
        /// `size` can be omitted if `source` is specified. `size` will then be set to the source image file size.
        /// `size` can be omitted if `base_volume_id` or `base_volume_name` is specified. `size` will then be set to the base volume size.
        /// If `size` is specified to be bigger than `base_volume_id` or `base_volume_name` size, you can use [cloudinit](https://cloudinit.readthedocs.io) if your OS supports it, with `libvirt.CloudInitDisk` and the [growpart](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#growpart) module to resize the partition.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        [Input("source")]
        public Input<string>? Source { get; set; }

        [Input("xml")]
        public Input<Inputs.VolumeXmlGetArgs>? Xml { get; set; }

        public VolumeState()
        {
        }
        public static new VolumeState Empty => new VolumeState();
    }
}
