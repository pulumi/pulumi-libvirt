// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Libvirt.Inputs
{

    public sealed class GetNodeDeviceInfoCapabilityInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If present, the MAC address of the device
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        /// <summary>
        /// Block device name
        /// </summary>
        [Input("block", required: true)]
        public Input<string> Block { get; set; } = null!;

        /// <summary>
        /// The bus within the host
        /// </summary>
        [Input("bus", required: true)]
        public Input<string> Bus { get; set; } = null!;

        [Input("capability")]
        private InputMap<string>? _capability;

        /// <summary>
        /// Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
        /// </summary>
        public InputMap<string> Capability
        {
            get => _capability ?? (_capability = new InputMap<string>());
            set => _capability = value;
        }

        /// <summary>
        /// Device class
        /// </summary>
        [Input("class", required: true)]
        public Input<string> Class { get; set; } = null!;

        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Which device within the \
        /// </summary>
        [Input("device", required: true)]
        public Input<string> Device { get; set; } = null!;

        /// <summary>
        /// Device PCI domain
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// Device drive type
        /// </summary>
        [Input("driveType", required: true)]
        public Input<string> DriveType { get; set; } = null!;

        /// <summary>
        /// Type of DRM device: `render` or `card`
        /// </summary>
        [Input("drmType", required: true)]
        public Input<string> DrmType { get; set; } = null!;

        [Input("features")]
        private InputList<string>? _features;
        public InputList<string> Features
        {
            get => _features ?? (_features = new InputList<string>());
            set => _features = value;
        }

        [Input("firmware")]
        private InputMap<string>? _firmware;
        public InputMap<string> Firmware
        {
            get => _firmware ?? (_firmware = new InputMap<string>());
            set => _firmware = value;
        }

        /// <summary>
        /// Device PCI function
        /// </summary>
        [Input("function", required: true)]
        public Input<string> Function { get; set; } = null!;

        [Input("hardware")]
        private InputMap<string>? _hardware;
        public InputMap<string> Hardware
        {
            get => _hardware ?? (_hardware = new InputMap<string>());
            set => _hardware = value;
        }

        /// <summary>
        /// The SCSI host containing the device
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// The interface name tied to this device
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// Structure that holds IOMMU Group `number` and the list of devices that are part of the group
        /// </summary>
        [Input("iommuGroup", required: true)]
        public Input<Inputs.GetNodeDeviceInfoCapabilityIommuGroupInputArgs> IommuGroup { get; set; } = null!;

        [Input("link")]
        private InputMap<string>? _link;

        /// <summary>
        /// Optional to reflect the status of the link via `speed` and `state` keys
        /// </summary>
        public InputMap<string> Link
        {
            get => _link ?? (_link = new InputMap<string>());
            set => _link = value;
        }

        /// <summary>
        /// Device logical block size
        /// </summary>
        [Input("logicalBlockSize", required: true)]
        public Input<string> LogicalBlockSize { get; set; } = null!;

        /// <summary>
        /// The lun within the target
        /// </summary>
        [Input("lun", required: true)]
        public Input<string> Lun { get; set; } = null!;

        /// <summary>
        /// Device model
        /// </summary>
        [Input("model", required: true)]
        public Input<string> Model { get; set; } = null!;

        /// <summary>
        /// Number of blocks on the device
        /// </summary>
        [Input("numBlocks", required: true)]
        public Input<string> NumBlocks { get; set; } = null!;

        /// <summary>
        /// Device number
        /// </summary>
        [Input("number", required: true)]
        public Input<string> Number { get; set; } = null!;

        [Input("product")]
        private InputMap<string>? _product;

        /// <summary>
        /// If present, the product `id` and `name` from the device ROM
        /// </summary>
        public InputMap<string> Product
        {
            get => _product ?? (_product = new InputMap<string>());
            set => _product = value;
        }

        /// <summary>
        /// Device protocol
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// The type of SCSI device
        /// </summary>
        [Input("scsiType", required: true)]
        public Input<string> ScsiType { get; set; } = null!;

        /// <summary>
        /// Device serial number
        /// </summary>
        [Input("serial", required: true)]
        public Input<string> Serial { get; set; } = null!;

        /// <summary>
        /// Device size in bytes
        /// </summary>
        [Input("size", required: true)]
        public Input<string> Size { get; set; } = null!;

        /// <summary>
        /// Device PCI slot
        /// </summary>
        [Input("slot", required: true)]
        public Input<string> Slot { get; set; } = null!;

        /// <summary>
        /// Device subclass
        /// </summary>
        [Input("subclass", required: true)]
        public Input<string> Subclass { get; set; } = null!;

        /// <summary>
        /// The target within the bus
        /// </summary>
        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        /// <summary>
        /// Device type: `pci`, `storage`, `usb`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// This optionally provides the value from the 'unique_id' file found in the scsi_host's directory
        /// </summary>
        [Input("uniqueId", required: true)]
        public Input<string> UniqueId { get; set; } = null!;

        [Input("vendor")]
        private InputMap<string>? _vendor;

        /// <summary>
        /// If present, the vendor `id` and `name` from the device ROM
        /// </summary>
        public InputMap<string> Vendor
        {
            get => _vendor ?? (_vendor = new InputMap<string>());
            set => _vendor = value;
        }

        public GetNodeDeviceInfoCapabilityInputArgs()
        {
        }
        public static new GetNodeDeviceInfoCapabilityInputArgs Empty => new GetNodeDeviceInfoCapabilityInputArgs();
    }
}
