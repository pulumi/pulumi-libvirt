// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Libvirt
{
    public static class GetNodeInfo
    {
        /// <summary>
        /// Retrieve information about the current node
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Libvirt = Pulumi.Libvirt;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var node = Libvirt.GetNodeInfo.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNodeInfoResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodeInfoResult>("libvirt:index/getNodeInfo:getNodeInfo", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Retrieve information about the current node
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Libvirt = Pulumi.Libvirt;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var node = Libvirt.GetNodeInfo.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodeInfoResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodeInfoResult>("libvirt:index/getNodeInfo:getNodeInfo", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Retrieve information about the current node
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Libvirt = Pulumi.Libvirt;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var node = Libvirt.GetNodeInfo.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodeInfoResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodeInfoResult>("libvirt:index/getNodeInfo:getNodeInfo", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetNodeInfoResult
    {
        /// <summary>
        /// Number of CPU cores per each socket
        /// </summary>
        public readonly int CpuCoresPerSocket;
        /// <summary>
        /// Number of CPU cores in total
        /// </summary>
        public readonly int CpuCoresTotal;
        /// <summary>
        /// CPU Architecture, usually `x86_64`
        /// </summary>
        public readonly string CpuModel;
        /// <summary>
        /// How many CPU sockets are present
        /// </summary>
        public readonly int CpuSockets;
        /// <summary>
        /// How many CPU Threads are available per each CPU core
        /// </summary>
        public readonly int CpuThreadsPerCore;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The amount of memory installed, in KiB
        /// </summary>
        public readonly int MemoryTotalKb;
        /// <summary>
        /// How many NUMA nodes/cells are available.
        /// </summary>
        public readonly int NumaNodes;

        [OutputConstructor]
        private GetNodeInfoResult(
            int cpuCoresPerSocket,

            int cpuCoresTotal,

            string cpuModel,

            int cpuSockets,

            int cpuThreadsPerCore,

            string id,

            int memoryTotalKb,

            int numaNodes)
        {
            CpuCoresPerSocket = cpuCoresPerSocket;
            CpuCoresTotal = cpuCoresTotal;
            CpuModel = cpuModel;
            CpuSockets = cpuSockets;
            CpuThreadsPerCore = cpuThreadsPerCore;
            Id = id;
            MemoryTotalKb = memoryTotalKb;
            NumaNodes = numaNodes;
        }
    }
}
