// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Libvirt
{
    public static class GetNodeDevices
    {
        /// <summary>
        /// Retrieve information about the devices present on the current node
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Libvirt = Pulumi.Libvirt;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var node = Libvirt.GetNodeDevices.Invoke(new()
        ///     {
        ///         Capability = "pci",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNodeDevicesResult> InvokeAsync(GetNodeDevicesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodeDevicesResult>("libvirt:index/getNodeDevices:getNodeDevices", args ?? new GetNodeDevicesArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve information about the devices present on the current node
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Libvirt = Pulumi.Libvirt;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var node = Libvirt.GetNodeDevices.Invoke(new()
        ///     {
        ///         Capability = "pci",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodeDevicesResult> Invoke(GetNodeDevicesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodeDevicesResult>("libvirt:index/getNodeDevices:getNodeDevices", args ?? new GetNodeDevicesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodeDevicesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of device, used to filter the output by capability type.
        /// Can be one of `system`, `pci`, `usb_device`,  `usb`,  `net`,  `scsi_host`,
        /// `scsi_target`,  `scsi`,  `storage`, `fc_host`,  `vports`, `scsi_generic`, `drm`,
        /// `mdev`, `mdev_types`, `ccw`, `css`, `ap_card`, `ap_queue`, `ap_matrix`.
        /// Defaults to all active devices.
        /// </summary>
        [Input("capability")]
        public string? Capability { get; set; }

        public GetNodeDevicesArgs()
        {
        }
        public static new GetNodeDevicesArgs Empty => new GetNodeDevicesArgs();
    }

    public sealed class GetNodeDevicesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of device, used to filter the output by capability type.
        /// Can be one of `system`, `pci`, `usb_device`,  `usb`,  `net`,  `scsi_host`,
        /// `scsi_target`,  `scsi`,  `storage`, `fc_host`,  `vports`, `scsi_generic`, `drm`,
        /// `mdev`, `mdev_types`, `ccw`, `css`, `ap_card`, `ap_queue`, `ap_matrix`.
        /// Defaults to all active devices.
        /// </summary>
        [Input("capability")]
        public Input<string>? Capability { get; set; }

        public GetNodeDevicesInvokeArgs()
        {
        }
        public static new GetNodeDevicesInvokeArgs Empty => new GetNodeDevicesInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodeDevicesResult
    {
        public readonly string? Capability;
        /// <summary>
        /// A list of devices that match the selected capability
        /// </summary>
        public readonly ImmutableArray<string> Devices;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetNodeDevicesResult(
            string? capability,

            ImmutableArray<string> devices,

            string id)
        {
            Capability = capability;
            Devices = devices;
            Id = id;
        }
    }
}
