// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Libvirt
{
    /// <summary>
    /// Manages a VM network resource within libvirt. For more information see
    /// [the official documentation](https://libvirt.org/formatnetwork.html).
    /// </summary>
    [LibvirtResourceType("libvirt:index/network:Network")]
    public partial class Network : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of (0 or 1) IPv4 and (0 or 1) IPv6 subnets in
        /// CIDR notation.  This defines the subnets associated to that network.
        /// This argument is also used to define the address on the real host.
        /// If `dhcp {  enabled = true }` addresses is also used to define the address range served by
        /// the DHCP server.
        /// No DHCP server will be started if `addresses` is omitted.
        /// </summary>
        [Output("addresses")]
        public Output<ImmutableArray<string>> Addresses { get; private set; } = null!;

        /// <summary>
        /// Set to `true` to start the network on host boot up.
        /// If not specified `false` is assumed.
        /// </summary>
        [Output("autostart")]
        public Output<bool> Autostart { get; private set; } = null!;

        /// <summary>
        /// The bridge device defines the name of a bridge
        /// device which will be used to construct the virtual network (when not provided,
        /// it will be automatically obtained by libvirt in `none`, `nat`, `route` and `open` modes).
        /// </summary>
        [Output("bridge")]
        public Output<string> Bridge { get; private set; } = null!;

        /// <summary>
        /// DHCP configuration. 
        /// You need to use it in conjuction with the adresses variable.
        /// </summary>
        [Output("dhcp")]
        public Output<Outputs.NetworkDhcp> Dhcp { get; private set; } = null!;

        /// <summary>
        /// configuration of DNS specific settings for the network
        /// </summary>
        [Output("dns")]
        public Output<Outputs.NetworkDns> Dns { get; private set; } = null!;

        /// <summary>
        /// configuration of Dnsmasq options for the network
        /// You need to provide a list of option name and value pairs.
        /// </summary>
        [Output("dnsmasqOptions")]
        public Output<Outputs.NetworkDnsmasqOptions?> DnsmasqOptions { get; private set; } = null!;

        /// <summary>
        /// The domain used by the DNS server.
        /// </summary>
        [Output("domain")]
        public Output<string?> Domain { get; private set; } = null!;

        /// <summary>
        /// One of:
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// The MTU to set for the underlying network interfaces. When
        /// not supplied, libvirt will use the default for the interface, usually 1500.
        /// Libvirt version 5.1 and greater will advertise this value to nodes via DHCP.
        /// </summary>
        [Output("mtu")]
        public Output<int?> Mtu { get; private set; } = null!;

        /// <summary>
        /// A unique name for the resource, required by libvirt.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// a list of static routes. A `cidr` and a `gateway` must
        /// be provided. The `gateway` must be reachable via the bridge interface.
        /// </summary>
        [Output("routes")]
        public Output<ImmutableArray<Outputs.NetworkRoute>> Routes { get; private set; } = null!;

        [Output("xml")]
        public Output<Outputs.NetworkXml?> Xml { get; private set; } = null!;


        /// <summary>
        /// Create a Network resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Network(string name, NetworkArgs? args = null, CustomResourceOptions? options = null)
            : base("libvirt:index/network:Network", name, args ?? new NetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Network(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
            : base("libvirt:index/network:Network", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Network resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Network Get(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new Network(name, id, state, options);
        }
    }

    public sealed class NetworkArgs : global::Pulumi.ResourceArgs
    {
        [Input("addresses")]
        private InputList<string>? _addresses;

        /// <summary>
        /// A list of (0 or 1) IPv4 and (0 or 1) IPv6 subnets in
        /// CIDR notation.  This defines the subnets associated to that network.
        /// This argument is also used to define the address on the real host.
        /// If `dhcp {  enabled = true }` addresses is also used to define the address range served by
        /// the DHCP server.
        /// No DHCP server will be started if `addresses` is omitted.
        /// </summary>
        public InputList<string> Addresses
        {
            get => _addresses ?? (_addresses = new InputList<string>());
            set => _addresses = value;
        }

        /// <summary>
        /// Set to `true` to start the network on host boot up.
        /// If not specified `false` is assumed.
        /// </summary>
        [Input("autostart")]
        public Input<bool>? Autostart { get; set; }

        /// <summary>
        /// The bridge device defines the name of a bridge
        /// device which will be used to construct the virtual network (when not provided,
        /// it will be automatically obtained by libvirt in `none`, `nat`, `route` and `open` modes).
        /// </summary>
        [Input("bridge")]
        public Input<string>? Bridge { get; set; }

        /// <summary>
        /// DHCP configuration. 
        /// You need to use it in conjuction with the adresses variable.
        /// </summary>
        [Input("dhcp")]
        public Input<Inputs.NetworkDhcpArgs>? Dhcp { get; set; }

        /// <summary>
        /// configuration of DNS specific settings for the network
        /// </summary>
        [Input("dns")]
        public Input<Inputs.NetworkDnsArgs>? Dns { get; set; }

        /// <summary>
        /// configuration of Dnsmasq options for the network
        /// You need to provide a list of option name and value pairs.
        /// </summary>
        [Input("dnsmasqOptions")]
        public Input<Inputs.NetworkDnsmasqOptionsArgs>? DnsmasqOptions { get; set; }

        /// <summary>
        /// The domain used by the DNS server.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// One of:
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The MTU to set for the underlying network interfaces. When
        /// not supplied, libvirt will use the default for the interface, usually 1500.
        /// Libvirt version 5.1 and greater will advertise this value to nodes via DHCP.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// A unique name for the resource, required by libvirt.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("routes")]
        private InputList<Inputs.NetworkRouteArgs>? _routes;

        /// <summary>
        /// a list of static routes. A `cidr` and a `gateway` must
        /// be provided. The `gateway` must be reachable via the bridge interface.
        /// </summary>
        public InputList<Inputs.NetworkRouteArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.NetworkRouteArgs>());
            set => _routes = value;
        }

        [Input("xml")]
        public Input<Inputs.NetworkXmlArgs>? Xml { get; set; }

        public NetworkArgs()
        {
        }
        public static new NetworkArgs Empty => new NetworkArgs();
    }

    public sealed class NetworkState : global::Pulumi.ResourceArgs
    {
        [Input("addresses")]
        private InputList<string>? _addresses;

        /// <summary>
        /// A list of (0 or 1) IPv4 and (0 or 1) IPv6 subnets in
        /// CIDR notation.  This defines the subnets associated to that network.
        /// This argument is also used to define the address on the real host.
        /// If `dhcp {  enabled = true }` addresses is also used to define the address range served by
        /// the DHCP server.
        /// No DHCP server will be started if `addresses` is omitted.
        /// </summary>
        public InputList<string> Addresses
        {
            get => _addresses ?? (_addresses = new InputList<string>());
            set => _addresses = value;
        }

        /// <summary>
        /// Set to `true` to start the network on host boot up.
        /// If not specified `false` is assumed.
        /// </summary>
        [Input("autostart")]
        public Input<bool>? Autostart { get; set; }

        /// <summary>
        /// The bridge device defines the name of a bridge
        /// device which will be used to construct the virtual network (when not provided,
        /// it will be automatically obtained by libvirt in `none`, `nat`, `route` and `open` modes).
        /// </summary>
        [Input("bridge")]
        public Input<string>? Bridge { get; set; }

        /// <summary>
        /// DHCP configuration. 
        /// You need to use it in conjuction with the adresses variable.
        /// </summary>
        [Input("dhcp")]
        public Input<Inputs.NetworkDhcpGetArgs>? Dhcp { get; set; }

        /// <summary>
        /// configuration of DNS specific settings for the network
        /// </summary>
        [Input("dns")]
        public Input<Inputs.NetworkDnsGetArgs>? Dns { get; set; }

        /// <summary>
        /// configuration of Dnsmasq options for the network
        /// You need to provide a list of option name and value pairs.
        /// </summary>
        [Input("dnsmasqOptions")]
        public Input<Inputs.NetworkDnsmasqOptionsGetArgs>? DnsmasqOptions { get; set; }

        /// <summary>
        /// The domain used by the DNS server.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// One of:
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The MTU to set for the underlying network interfaces. When
        /// not supplied, libvirt will use the default for the interface, usually 1500.
        /// Libvirt version 5.1 and greater will advertise this value to nodes via DHCP.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// A unique name for the resource, required by libvirt.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("routes")]
        private InputList<Inputs.NetworkRouteGetArgs>? _routes;

        /// <summary>
        /// a list of static routes. A `cidr` and a `gateway` must
        /// be provided. The `gateway` must be reachable via the bridge interface.
        /// </summary>
        public InputList<Inputs.NetworkRouteGetArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.NetworkRouteGetArgs>());
            set => _routes = value;
        }

        [Input("xml")]
        public Input<Inputs.NetworkXmlGetArgs>? Xml { get; set; }

        public NetworkState()
        {
        }
        public static new NetworkState Empty => new NetworkState();
    }
}
