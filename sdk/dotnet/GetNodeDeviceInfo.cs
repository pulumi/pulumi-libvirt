// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Libvirt
{
    public static class GetNodeDeviceInfo
    {
        /// <summary>
        /// Retrieve information about a specific device on the current node
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Libvirt = Pulumi.Libvirt;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var device = Libvirt.GetNodeDeviceInfo.Invoke(new()
        ///     {
        ///         Name = "pci_0000_00_00_0",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNodeDeviceInfoResult> InvokeAsync(GetNodeDeviceInfoArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodeDeviceInfoResult>("libvirt:index/getNodeDeviceInfo:getNodeDeviceInfo", args ?? new GetNodeDeviceInfoArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve information about a specific device on the current node
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Libvirt = Pulumi.Libvirt;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var device = Libvirt.GetNodeDeviceInfo.Invoke(new()
        ///     {
        ///         Name = "pci_0000_00_00_0",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodeDeviceInfoResult> Invoke(GetNodeDeviceInfoInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodeDeviceInfoResult>("libvirt:index/getNodeDeviceInfo:getNodeDeviceInfo", args ?? new GetNodeDeviceInfoInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodeDeviceInfoArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
        /// </summary>
        [Input("capability")]
        public Inputs.GetNodeDeviceInfoCapabilityArgs? Capability { get; set; }

        /// <summary>
        /// The name of the device name as expected by [libvirt](https://www.libvirt.org/manpages/virsh.html#nodedev-commands).
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetNodeDeviceInfoArgs()
        {
        }
        public static new GetNodeDeviceInfoArgs Empty => new GetNodeDeviceInfoArgs();
    }

    public sealed class GetNodeDeviceInfoInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
        /// </summary>
        [Input("capability")]
        public Input<Inputs.GetNodeDeviceInfoCapabilityInputArgs>? Capability { get; set; }

        /// <summary>
        /// The name of the device name as expected by [libvirt](https://www.libvirt.org/manpages/virsh.html#nodedev-commands).
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetNodeDeviceInfoInvokeArgs()
        {
        }
        public static new GetNodeDeviceInfoInvokeArgs Empty => new GetNodeDeviceInfoInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodeDeviceInfoResult
    {
        /// <summary>
        /// Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
        /// </summary>
        public readonly Outputs.GetNodeDeviceInfoCapabilityResult Capability;
        /// <summary>
        /// For type `drm` holds the `path` and `link` that point to the device
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNodeDeviceInfoDevnodeResult> Devnodes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// The parent of this device in the hierarchy
        /// </summary>
        public readonly string Parent;
        /// <summary>
        /// Full path of the device
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// The XML returned by the libvirt API call
        /// </summary>
        public readonly string Xml;

        [OutputConstructor]
        private GetNodeDeviceInfoResult(
            Outputs.GetNodeDeviceInfoCapabilityResult capability,

            ImmutableArray<Outputs.GetNodeDeviceInfoDevnodeResult> devnodes,

            string id,

            string name,

            string parent,

            string path,

            string xml)
        {
            Capability = capability;
            Devnodes = devnodes;
            Id = id;
            Name = name;
            Parent = parent;
            Path = path;
            Xml = xml;
        }
    }
}
