// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Libvirt.Outputs
{

    [OutputType]
    public sealed class GetNodeDeviceInfoCapabilityResult
    {
        /// <summary>
        /// If present, the MAC address of the device
        /// </summary>
        public readonly string? Address;
        /// <summary>
        /// Block device name
        /// </summary>
        public readonly string Block;
        /// <summary>
        /// The bus within the host
        /// </summary>
        public readonly string Bus;
        /// <summary>
        /// Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Capability;
        /// <summary>
        /// Device class
        /// </summary>
        public readonly string Class;
        public readonly string Description;
        /// <summary>
        /// Which device within the \
        /// </summary>
        public readonly string Device;
        /// <summary>
        /// Device PCI domain
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// Device drive type
        /// </summary>
        public readonly string DriveType;
        /// <summary>
        /// Type of DRM device: `render` or `card`
        /// </summary>
        public readonly string DrmType;
        public readonly ImmutableArray<string> Features;
        public readonly ImmutableDictionary<string, string>? Firmware;
        /// <summary>
        /// Device PCI function
        /// </summary>
        public readonly string Function;
        public readonly ImmutableDictionary<string, string>? Hardware;
        /// <summary>
        /// The SCSI host containing the device
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// The interface name tied to this device
        /// </summary>
        public readonly string? Interface;
        /// <summary>
        /// Structure that holds IOMMU Group `number` and the list of devices that are part of the group
        /// </summary>
        public readonly Outputs.GetNodeDeviceInfoCapabilityIommuGroupResult IommuGroup;
        /// <summary>
        /// Optional to reflect the status of the link via `speed` and `state` keys
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Link;
        /// <summary>
        /// Device logical block size
        /// </summary>
        public readonly string LogicalBlockSize;
        /// <summary>
        /// The lun within the target
        /// </summary>
        public readonly string Lun;
        /// <summary>
        /// Device model
        /// </summary>
        public readonly string Model;
        /// <summary>
        /// Number of blocks on the device
        /// </summary>
        public readonly string NumBlocks;
        /// <summary>
        /// Device number
        /// </summary>
        public readonly string Number;
        /// <summary>
        /// If present, the product `id` and `name` from the device ROM
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Product;
        /// <summary>
        /// Device protocol
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The type of SCSI device
        /// </summary>
        public readonly string ScsiType;
        /// <summary>
        /// Device serial number
        /// </summary>
        public readonly string Serial;
        /// <summary>
        /// Device size in bytes
        /// </summary>
        public readonly string Size;
        /// <summary>
        /// Device PCI slot
        /// </summary>
        public readonly string Slot;
        /// <summary>
        /// Device subclass
        /// </summary>
        public readonly string Subclass;
        /// <summary>
        /// The target within the bus
        /// </summary>
        public readonly string Target;
        /// <summary>
        /// Device type: `pci`, `storage`, `usb`
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// This optionally provides the value from the 'unique_id' file found in the scsi_host's directory
        /// </summary>
        public readonly string UniqueId;
        /// <summary>
        /// If present, the vendor `id` and `name` from the device ROM
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Vendor;

        [OutputConstructor]
        private GetNodeDeviceInfoCapabilityResult(
            string? address,

            string block,

            string bus,

            ImmutableDictionary<string, string>? capability,

            string @class,

            string description,

            string device,

            string domain,

            string driveType,

            string drmType,

            ImmutableArray<string> features,

            ImmutableDictionary<string, string>? firmware,

            string function,

            ImmutableDictionary<string, string>? hardware,

            string host,

            string? @interface,

            Outputs.GetNodeDeviceInfoCapabilityIommuGroupResult iommuGroup,

            ImmutableDictionary<string, string>? link,

            string logicalBlockSize,

            string lun,

            string model,

            string numBlocks,

            string number,

            ImmutableDictionary<string, string>? product,

            string protocol,

            string scsiType,

            string serial,

            string size,

            string slot,

            string subclass,

            string target,

            string type,

            string uniqueId,

            ImmutableDictionary<string, string>? vendor)
        {
            Address = address;
            Block = block;
            Bus = bus;
            Capability = capability;
            Class = @class;
            Description = description;
            Device = device;
            Domain = domain;
            DriveType = driveType;
            DrmType = drmType;
            Features = features;
            Firmware = firmware;
            Function = function;
            Hardware = hardware;
            Host = host;
            Interface = @interface;
            IommuGroup = iommuGroup;
            Link = link;
            LogicalBlockSize = logicalBlockSize;
            Lun = lun;
            Model = model;
            NumBlocks = numBlocks;
            Number = number;
            Product = product;
            Protocol = protocol;
            ScsiType = scsiType;
            Serial = serial;
            Size = size;
            Slot = slot;
            Subclass = subclass;
            Target = target;
            Type = type;
            UniqueId = uniqueId;
            Vendor = vendor;
        }
    }
}
