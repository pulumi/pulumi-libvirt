# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .cloud_init_disk import *
from .domain import *
from .get_network_dns_host_template import *
from .get_network_dns_srv_template import *
from .get_network_dnsmasq_options_template import *
from .ignition import *
from .network import *
from .pool import *
from .provider import *
from .volume import *
from ._inputs import *
from . import outputs

# Make subpackages available:
from . import (
    config,
)

def _register_module():
    import pulumi
    from . import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "libvirt:index/cloudInitDisk:CloudInitDisk":
                return CloudInitDisk(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "libvirt:index/domain:Domain":
                return Domain(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "libvirt:index/ignition:Ignition":
                return Ignition(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "libvirt:index/network:Network":
                return Network(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "libvirt:index/pool:Pool":
                return Pool(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "libvirt:index/volume:Volume":
                return Volume(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("libvirt", "index/cloudInitDisk", _module_instance)
    pulumi.runtime.register_resource_module("libvirt", "index/domain", _module_instance)
    pulumi.runtime.register_resource_module("libvirt", "index/ignition", _module_instance)
    pulumi.runtime.register_resource_module("libvirt", "index/network", _module_instance)
    pulumi.runtime.register_resource_module("libvirt", "index/pool", _module_instance)
    pulumi.runtime.register_resource_module("libvirt", "index/volume", _module_instance)


    class Package(pulumi.runtime.ResourcePackage):
        _version = _utilities.get_semver_version()

        def version(self):
            return Package._version

        def construct_provider(self, name: str, typ: str, urn: str) -> pulumi.ProviderResource:
            if typ != "pulumi:providers:libvirt":
                raise Exception(f"unknown provider type {typ}")
            return Provider(name, pulumi.ResourceOptions(urn=urn))


    pulumi.runtime.register_resource_package("libvirt", Package())

_register_module()
