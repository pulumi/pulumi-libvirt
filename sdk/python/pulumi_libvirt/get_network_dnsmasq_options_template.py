# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNetworkDnsmasqOptionsTemplateResult',
    'AwaitableGetNetworkDnsmasqOptionsTemplateResult',
    'get_network_dnsmasq_options_template',
    'get_network_dnsmasq_options_template_output',
]

@pulumi.output_type
class GetNetworkDnsmasqOptionsTemplateResult:
    """
    A collection of values returned by getNetworkDnsmasqOptionsTemplate.
    """
    def __init__(__self__, id=None, option_name=None, option_value=None, rendered=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if option_name and not isinstance(option_name, str):
            raise TypeError("Expected argument 'option_name' to be a str")
        pulumi.set(__self__, "option_name", option_name)
        if option_value and not isinstance(option_value, str):
            raise TypeError("Expected argument 'option_value' to be a str")
        pulumi.set(__self__, "option_value", option_value)
        if rendered and not isinstance(rendered, dict):
            raise TypeError("Expected argument 'rendered' to be a dict")
        pulumi.set(__self__, "rendered", rendered)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="optionName")
    def option_name(self) -> str:
        return pulumi.get(self, "option_name")

    @property
    @pulumi.getter(name="optionValue")
    def option_value(self) -> Optional[str]:
        return pulumi.get(self, "option_value")

    @property
    @pulumi.getter
    def rendered(self) -> Mapping[str, str]:
        return pulumi.get(self, "rendered")


class AwaitableGetNetworkDnsmasqOptionsTemplateResult(GetNetworkDnsmasqOptionsTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkDnsmasqOptionsTemplateResult(
            id=self.id,
            option_name=self.option_name,
            option_value=self.option_value,
            rendered=self.rendered)


def get_network_dnsmasq_options_template(option_name: Optional[str] = None,
                                         option_value: Optional[str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkDnsmasqOptionsTemplateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['optionName'] = option_name
    __args__['optionValue'] = option_value
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('libvirt:index/getNetworkDnsmasqOptionsTemplate:getNetworkDnsmasqOptionsTemplate', __args__, opts=opts, typ=GetNetworkDnsmasqOptionsTemplateResult).value

    return AwaitableGetNetworkDnsmasqOptionsTemplateResult(
        id=pulumi.get(__ret__, 'id'),
        option_name=pulumi.get(__ret__, 'option_name'),
        option_value=pulumi.get(__ret__, 'option_value'),
        rendered=pulumi.get(__ret__, 'rendered'))


@_utilities.lift_output_func(get_network_dnsmasq_options_template)
def get_network_dnsmasq_options_template_output(option_name: Optional[pulumi.Input[str]] = None,
                                                option_value: Optional[pulumi.Input[Optional[str]]] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkDnsmasqOptionsTemplateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
