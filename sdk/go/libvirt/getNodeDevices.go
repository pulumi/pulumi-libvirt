// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package libvirt

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-libvirt/sdk/go/libvirt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve information about the devices present on the current node
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-libvirt/sdk/go/libvirt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := libvirt.GetNodeDevices(ctx, &libvirt.GetNodeDevicesArgs{
//				Capability: pulumi.StringRef("pci"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNodeDevices(ctx *pulumi.Context, args *GetNodeDevicesArgs, opts ...pulumi.InvokeOption) (*GetNodeDevicesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNodeDevicesResult
	err := ctx.Invoke("libvirt:index/getNodeDevices:getNodeDevices", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNodeDevices.
type GetNodeDevicesArgs struct {
	// The type of device, used to filter the output by capability type.
	// Can be one of `system`, `pci`, `usbDevice`,  `usb`,  `net`,  `scsiHost`,
	// `scsiTarget`,  `scsi`,  `storage`, `fcHost`,  `vports`, `scsiGeneric`, `drm`,
	// `mdev`, `mdevTypes`, `ccw`, `css`, `apCard`, `apQueue`, `apMatrix`.
	// Defaults to all active devices.
	Capability *string `pulumi:"capability"`
}

// A collection of values returned by getNodeDevices.
type GetNodeDevicesResult struct {
	Capability *string `pulumi:"capability"`
	// A list of devices that match the selected capability
	Devices []string `pulumi:"devices"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetNodeDevicesOutput(ctx *pulumi.Context, args GetNodeDevicesOutputArgs, opts ...pulumi.InvokeOption) GetNodeDevicesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetNodeDevicesResultOutput, error) {
			args := v.(GetNodeDevicesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("libvirt:index/getNodeDevices:getNodeDevices", args, GetNodeDevicesResultOutput{}, options).(GetNodeDevicesResultOutput), nil
		}).(GetNodeDevicesResultOutput)
}

// A collection of arguments for invoking getNodeDevices.
type GetNodeDevicesOutputArgs struct {
	// The type of device, used to filter the output by capability type.
	// Can be one of `system`, `pci`, `usbDevice`,  `usb`,  `net`,  `scsiHost`,
	// `scsiTarget`,  `scsi`,  `storage`, `fcHost`,  `vports`, `scsiGeneric`, `drm`,
	// `mdev`, `mdevTypes`, `ccw`, `css`, `apCard`, `apQueue`, `apMatrix`.
	// Defaults to all active devices.
	Capability pulumi.StringPtrInput `pulumi:"capability"`
}

func (GetNodeDevicesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeDevicesArgs)(nil)).Elem()
}

// A collection of values returned by getNodeDevices.
type GetNodeDevicesResultOutput struct{ *pulumi.OutputState }

func (GetNodeDevicesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeDevicesResult)(nil)).Elem()
}

func (o GetNodeDevicesResultOutput) ToGetNodeDevicesResultOutput() GetNodeDevicesResultOutput {
	return o
}

func (o GetNodeDevicesResultOutput) ToGetNodeDevicesResultOutputWithContext(ctx context.Context) GetNodeDevicesResultOutput {
	return o
}

func (o GetNodeDevicesResultOutput) Capability() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeDevicesResult) *string { return v.Capability }).(pulumi.StringPtrOutput)
}

// A list of devices that match the selected capability
func (o GetNodeDevicesResultOutput) Devices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNodeDevicesResult) []string { return v.Devices }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNodeDevicesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeDevicesResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNodeDevicesResultOutput{})
}
