// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package libvirt

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-libvirt/sdk/go/libvirt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve information about a specific device on the current node
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-libvirt/sdk/go/libvirt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := libvirt.GetNodeDeviceInfo(ctx, &libvirt.GetNodeDeviceInfoArgs{
//				Name: "pci_0000_00_00_0",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNodeDeviceInfo(ctx *pulumi.Context, args *GetNodeDeviceInfoArgs, opts ...pulumi.InvokeOption) (*GetNodeDeviceInfoResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNodeDeviceInfoResult
	err := ctx.Invoke("libvirt:index/getNodeDeviceInfo:getNodeDeviceInfo", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNodeDeviceInfo.
type GetNodeDeviceInfoArgs struct {
	// Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
	Capability *GetNodeDeviceInfoCapability `pulumi:"capability"`
	// The name of the device name as expected by [libvirt](https://www.libvirt.org/manpages/virsh.html#nodedev-commands).
	Name string `pulumi:"name"`
}

// A collection of values returned by getNodeDeviceInfo.
type GetNodeDeviceInfoResult struct {
	// Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
	Capability GetNodeDeviceInfoCapability `pulumi:"capability"`
	// For type `drm` holds the `path` and `link` that point to the device
	Devnodes []GetNodeDeviceInfoDevnode `pulumi:"devnodes"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// The parent of this device in the hierarchy
	Parent string `pulumi:"parent"`
	// Full path of the device
	Path string `pulumi:"path"`
	// The XML returned by the libvirt API call
	Xml string `pulumi:"xml"`
}

func GetNodeDeviceInfoOutput(ctx *pulumi.Context, args GetNodeDeviceInfoOutputArgs, opts ...pulumi.InvokeOption) GetNodeDeviceInfoResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetNodeDeviceInfoResultOutput, error) {
			args := v.(GetNodeDeviceInfoArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("libvirt:index/getNodeDeviceInfo:getNodeDeviceInfo", args, GetNodeDeviceInfoResultOutput{}, options).(GetNodeDeviceInfoResultOutput), nil
		}).(GetNodeDeviceInfoResultOutput)
}

// A collection of arguments for invoking getNodeDeviceInfo.
type GetNodeDeviceInfoOutputArgs struct {
	// Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
	Capability GetNodeDeviceInfoCapabilityPtrInput `pulumi:"capability"`
	// The name of the device name as expected by [libvirt](https://www.libvirt.org/manpages/virsh.html#nodedev-commands).
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetNodeDeviceInfoOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeDeviceInfoArgs)(nil)).Elem()
}

// A collection of values returned by getNodeDeviceInfo.
type GetNodeDeviceInfoResultOutput struct{ *pulumi.OutputState }

func (GetNodeDeviceInfoResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeDeviceInfoResult)(nil)).Elem()
}

func (o GetNodeDeviceInfoResultOutput) ToGetNodeDeviceInfoResultOutput() GetNodeDeviceInfoResultOutput {
	return o
}

func (o GetNodeDeviceInfoResultOutput) ToGetNodeDeviceInfoResultOutputWithContext(ctx context.Context) GetNodeDeviceInfoResultOutput {
	return o
}

// Holds key `type` that describes the type of network interface: `80203` for IEEE 802.3 or `80211` for IEEE 802.11
func (o GetNodeDeviceInfoResultOutput) Capability() GetNodeDeviceInfoCapabilityOutput {
	return o.ApplyT(func(v GetNodeDeviceInfoResult) GetNodeDeviceInfoCapability { return v.Capability }).(GetNodeDeviceInfoCapabilityOutput)
}

// For type `drm` holds the `path` and `link` that point to the device
func (o GetNodeDeviceInfoResultOutput) Devnodes() GetNodeDeviceInfoDevnodeArrayOutput {
	return o.ApplyT(func(v GetNodeDeviceInfoResult) []GetNodeDeviceInfoDevnode { return v.Devnodes }).(GetNodeDeviceInfoDevnodeArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNodeDeviceInfoResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeDeviceInfoResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNodeDeviceInfoResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeDeviceInfoResult) string { return v.Name }).(pulumi.StringOutput)
}

// The parent of this device in the hierarchy
func (o GetNodeDeviceInfoResultOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeDeviceInfoResult) string { return v.Parent }).(pulumi.StringOutput)
}

// Full path of the device
func (o GetNodeDeviceInfoResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeDeviceInfoResult) string { return v.Path }).(pulumi.StringOutput)
}

// The XML returned by the libvirt API call
func (o GetNodeDeviceInfoResultOutput) Xml() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeDeviceInfoResult) string { return v.Xml }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNodeDeviceInfoResultOutput{})
}
