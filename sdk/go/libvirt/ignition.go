// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package libvirt

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Ignition struct {
	pulumi.CustomResourceState

	Content pulumi.StringOutput `pulumi:"content"`
	// A unique name for the resource, required by libvirt.
	Name pulumi.StringOutput `pulumi:"name"`
	// The pool where the resource will be created.
	// If not given, the `default` pool will be used.
	Pool pulumi.StringPtrOutput `pulumi:"pool"`
}

// NewIgnition registers a new resource with the given unique name, arguments, and options.
func NewIgnition(ctx *pulumi.Context,
	name string, args *IgnitionArgs, opts ...pulumi.ResourceOption) (*Ignition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	var resource Ignition
	err := ctx.RegisterResource("libvirt:index/ignition:Ignition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIgnition gets an existing Ignition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIgnition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IgnitionState, opts ...pulumi.ResourceOption) (*Ignition, error) {
	var resource Ignition
	err := ctx.ReadResource("libvirt:index/ignition:Ignition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ignition resources.
type ignitionState struct {
	Content *string `pulumi:"content"`
	// A unique name for the resource, required by libvirt.
	Name *string `pulumi:"name"`
	// The pool where the resource will be created.
	// If not given, the `default` pool will be used.
	Pool *string `pulumi:"pool"`
}

type IgnitionState struct {
	Content pulumi.StringPtrInput
	// A unique name for the resource, required by libvirt.
	Name pulumi.StringPtrInput
	// The pool where the resource will be created.
	// If not given, the `default` pool will be used.
	Pool pulumi.StringPtrInput
}

func (IgnitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*ignitionState)(nil)).Elem()
}

type ignitionArgs struct {
	Content string `pulumi:"content"`
	// A unique name for the resource, required by libvirt.
	Name *string `pulumi:"name"`
	// The pool where the resource will be created.
	// If not given, the `default` pool will be used.
	Pool *string `pulumi:"pool"`
}

// The set of arguments for constructing a Ignition resource.
type IgnitionArgs struct {
	Content pulumi.StringInput
	// A unique name for the resource, required by libvirt.
	Name pulumi.StringPtrInput
	// The pool where the resource will be created.
	// If not given, the `default` pool will be used.
	Pool pulumi.StringPtrInput
}

func (IgnitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ignitionArgs)(nil)).Elem()
}

type IgnitionInput interface {
	pulumi.Input

	ToIgnitionOutput() IgnitionOutput
	ToIgnitionOutputWithContext(ctx context.Context) IgnitionOutput
}

func (*Ignition) ElementType() reflect.Type {
	return reflect.TypeOf((**Ignition)(nil)).Elem()
}

func (i *Ignition) ToIgnitionOutput() IgnitionOutput {
	return i.ToIgnitionOutputWithContext(context.Background())
}

func (i *Ignition) ToIgnitionOutputWithContext(ctx context.Context) IgnitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IgnitionOutput)
}

// IgnitionArrayInput is an input type that accepts IgnitionArray and IgnitionArrayOutput values.
// You can construct a concrete instance of `IgnitionArrayInput` via:
//
//	IgnitionArray{ IgnitionArgs{...} }
type IgnitionArrayInput interface {
	pulumi.Input

	ToIgnitionArrayOutput() IgnitionArrayOutput
	ToIgnitionArrayOutputWithContext(context.Context) IgnitionArrayOutput
}

type IgnitionArray []IgnitionInput

func (IgnitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ignition)(nil)).Elem()
}

func (i IgnitionArray) ToIgnitionArrayOutput() IgnitionArrayOutput {
	return i.ToIgnitionArrayOutputWithContext(context.Background())
}

func (i IgnitionArray) ToIgnitionArrayOutputWithContext(ctx context.Context) IgnitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IgnitionArrayOutput)
}

// IgnitionMapInput is an input type that accepts IgnitionMap and IgnitionMapOutput values.
// You can construct a concrete instance of `IgnitionMapInput` via:
//
//	IgnitionMap{ "key": IgnitionArgs{...} }
type IgnitionMapInput interface {
	pulumi.Input

	ToIgnitionMapOutput() IgnitionMapOutput
	ToIgnitionMapOutputWithContext(context.Context) IgnitionMapOutput
}

type IgnitionMap map[string]IgnitionInput

func (IgnitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ignition)(nil)).Elem()
}

func (i IgnitionMap) ToIgnitionMapOutput() IgnitionMapOutput {
	return i.ToIgnitionMapOutputWithContext(context.Background())
}

func (i IgnitionMap) ToIgnitionMapOutputWithContext(ctx context.Context) IgnitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IgnitionMapOutput)
}

type IgnitionOutput struct{ *pulumi.OutputState }

func (IgnitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ignition)(nil)).Elem()
}

func (o IgnitionOutput) ToIgnitionOutput() IgnitionOutput {
	return o
}

func (o IgnitionOutput) ToIgnitionOutputWithContext(ctx context.Context) IgnitionOutput {
	return o
}

func (o IgnitionOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *Ignition) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// A unique name for the resource, required by libvirt.
func (o IgnitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ignition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The pool where the resource will be created.
// If not given, the `default` pool will be used.
func (o IgnitionOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ignition) pulumi.StringPtrOutput { return v.Pool }).(pulumi.StringPtrOutput)
}

type IgnitionArrayOutput struct{ *pulumi.OutputState }

func (IgnitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ignition)(nil)).Elem()
}

func (o IgnitionArrayOutput) ToIgnitionArrayOutput() IgnitionArrayOutput {
	return o
}

func (o IgnitionArrayOutput) ToIgnitionArrayOutputWithContext(ctx context.Context) IgnitionArrayOutput {
	return o
}

func (o IgnitionArrayOutput) Index(i pulumi.IntInput) IgnitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ignition {
		return vs[0].([]*Ignition)[vs[1].(int)]
	}).(IgnitionOutput)
}

type IgnitionMapOutput struct{ *pulumi.OutputState }

func (IgnitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ignition)(nil)).Elem()
}

func (o IgnitionMapOutput) ToIgnitionMapOutput() IgnitionMapOutput {
	return o
}

func (o IgnitionMapOutput) ToIgnitionMapOutputWithContext(ctx context.Context) IgnitionMapOutput {
	return o
}

func (o IgnitionMapOutput) MapIndex(k pulumi.StringInput) IgnitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ignition {
		return vs[0].(map[string]*Ignition)[vs[1].(string)]
	}).(IgnitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IgnitionInput)(nil)).Elem(), &Ignition{})
	pulumi.RegisterInputType(reflect.TypeOf((*IgnitionArrayInput)(nil)).Elem(), IgnitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IgnitionMapInput)(nil)).Elem(), IgnitionMap{})
	pulumi.RegisterOutputType(IgnitionOutput{})
	pulumi.RegisterOutputType(IgnitionArrayOutput{})
	pulumi.RegisterOutputType(IgnitionMapOutput{})
}
